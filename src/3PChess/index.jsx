import React, { useEffect, useState } from "react";

import "./styles.css";

const Cell = (props) => {
    const { id, selected, value, win, player, setCount, setPlayer, setArray, setSelected, checkForMovement, checkForCastle } = props;

    const handleClick = () => {
        if (selected.value) {
            // Cancel Move
            if (id == selected.id) {
                setSelected({ id: -1, value: false, piece: selected.piece, blockedArray: selected.blockedArray, moved: selected.moved, passant: selected.passant });
            }
            // Normal Move
            else {
                var moves = selected.moved;
                if (selected.piece == '♚' && !moves[0]) {
                    moves[0] = true;
                } else if (selected.piece == '♔' && !moves[1]) {
                    moves[1] = true;
                } else if (selected.piece == '🨀' && !moves[2]) {
                    moves[2] = true;
                } else if (selected.piece == '♜') {
                    if (selected.id == 0 && !moves[3]) {
                        moves[3] = true;
                    } else if (selected.id == 56 && !moves[4]) {
                        moves[4] = true;
                    }
                } else if (selected.piece == '♖') {
                    if (selected.id == 88 && !moves[5]) {
                        moves[5] = true;
                    } else if (selected.id == 95 && !moves[6]) {
                        moves[6] = true;
                    }
                } else if (selected.piece == '🨂') {
                    if (selected.id == 63 && !moves[7]) {
                        moves[7] = true;
                    } else if (selected.id == 7 && !moves[8]) {
                        moves[8] = true;
                    }
                }
                if (value == '♜') {
                    if (id == 0 && !moves[3]) {
                        moves[3] = true;
                    } else if (id == 56 && !moves[4]) {
                        moves[4] = true;
                    }
                } else if (value == '♖') {
                    if (id == 88 && !moves[5]) {
                        moves[5] = true;
                    } else if (id == 95 && !moves[6]) {
                        moves[6] = true;
                    }
                } else if (value == '🨂') {
                    if (id == 63 && !moves[7]) {
                        moves[7] = true;
                    } else if (id == 7 && !moves[8]) {
                        moves[8] = true;
                    }
                }
                if ((selected.piece == '♔' || selected.piece == '♚' || selected.piece == '🨀') && (Math.abs(id - selected.id) == 2 || Math.abs(id - selected.id) == 16)) {
                    if (id == 16) {
                        setArray(0, '');
                        setArray(24, '♜');
                    } else if (id == 48) {
                        setArray(56, '');
                        setArray(40, '♜');
                    } else if (id == 90) {
                        setArray(88, '');
                        setArray(91, '♖');
                    } else if (id == 94) {
                        setArray(95, '');
                        setArray(93, '♖');
                    } else if (id == 15) {
                        setArray(7, '');
                        setArray(23, '🨂');
                    } else if (id == 47) {
                        setArray(63, '');
                        setArray(39, '🨂');
                    }
                }
                var passant = selected.id;
                if ((selected.piece == '♙' || selected.piece == '♟' || selected.piece == '🨅') && (Math.abs(id - selected.id) == 16 || Math.abs(id - selected.id) == 2)) {
                    if (id > 63) {
                        passant -= 8;
                    } else {
                        if (id % 8 == 4) {
                            passant--;
                        } else if (id % 8 == 3) {
                            passant++;
                        }
                    }
                } else {
                    passant = -1;
                }
                if ((selected.piece == '♙' || selected.piece == '♟' || selected.piece == '🨅') && (Math.abs(id - selected.id) == 7 || Math.abs(id - selected.id) == 9) && value == '') {
                    if (Math.floor(id / 8) == 9) {
                        setArray(id - 8, '');
                    } else if (id < 64 && id % 8 == 2) {
                        setArray(id++, '');
                    } else if (id < 64 && id % 8 == 5) {
                        setArray(id--, '');
                    }
                }
                if (value == '' && selected.piece != '♙' && selected.piece != '♟' && selected.piece != '🨅') {
                    setCount(prev => prev + 1);
                } else {
                    setCount(0);
                }
                setPlayer();
                setArray(selected.id, '');
                setArray(id, selected.piece);
                setSelected({ id: selected.id, value: false, piece: selected.piece, blockedArray: selected.blockedArray, moved: moves, passant: passant });
            }
            // Upgrade White Pawn to Queen
            if (((id < 64 && id % 8 == 0) || (id < 64 && id % 8 == 7)) && selected.piece == '♙') {
                setArray(id, '♕');
            }
            // Upgrade Black Pawn to Queen
            if (((id < 64 && id % 8 == 7) || id > 87) && selected.piece == '♟') {
                setArray(id, '♛');
            }
            // Upgrade Bichrome Pawn to Queen
            if (((id < 64 && id % 8 == 0) || id > 87) && selected.piece == '🨅') {
                setArray(id, '🨁');
            }
        } else {
            setSelected({ id: id, value: true, piece: value, blockedArray: selected.blockedArray, moved: selected.moved, passant: selected.passant });
        }
    }

    const blackSelect = player == 'Black' && value != '♟' && value != '♜' && value != '♞' && value != '♝' && value != '♛' && value != '♚';
    const whiteSelect = player == 'White' && value != '♙' && value != '♖' && value != '♘' && value != '♗' && value != '♕' && value != '♔';
    const bichromeSelect = player == 'Bichrome' && value != '🨅' && value != '🨂' && value != '🨄' && value != '🨃' && value != '🨁' && value != '🨀';
    const blackCastle = selected.piece == '♚' ? (checkForCastle(32, 0) ? id != 16 : true) && (checkForCastle(32, 56) ? id != 48 : true) : true;
    const whiteCastle = selected.piece == '♔' ? (checkForCastle(92, 88) ? id != 90 : true) && (checkForCastle(92, 95) ? id != 94 : true) : true;
    const bichromeCastle = selected.piece == '🨀' ? (checkForCastle(31, 7) ? id != 15 : true) && (checkForCastle(31, 63) ? id != 47 : true) : true;
    const blackPassant = id > 63 ? (id != selected.passant || id != selected.id + 7) && (id != selected.passant || id != selected.id + 9) :
        (id != selected.passant || id != selected.id - 7) && (id != selected.passant || id != selected.id + 9);
    const whitePassant = id % 8 > 3 ? (id != selected.passant || id != selected.id - 7) && (id != selected.passant || id != selected.id + 9) :
        (id != selected.passant || id != selected.id + 7) && (id != selected.passant || id != selected.id - 9);
    const bichromePassant = id > 63 ? (id != selected.passant || id != selected.id + 7) && (id != selected.passant || id != selected.id + 9) :
        (id != selected.passant || id != selected.id + 7) && (id != selected.passant || id != selected.id - 9);
    const select = !selected.value && (selected.blockedArray.some(val => (id == val)) || (blackSelect || whiteSelect || bichromeSelect));
    const movement = selected.value && (!checkForMovement(selected.id).some(val => (id == val)) &&
        (player == 'Black' ? (selected.piece == '♟' ? blackPassant : blackCastle) : (player == 'White' ? (selected.piece == '♙' ? whitePassant : whiteCastle) : (selected.piece == '🨅' ? bichromePassant : bichromeCastle))));
    const noWin = win != '' && win != 'Check';

    return <button className={"celll" + id.toString()} onClick={handleClick}
        disabled={select || movement || noWin}>{value}</button>;
};

export default function App() {
    const [player, setPlayer] = useState('White'); // whose turn
    const [win, setWin] = useState(''); // win state
    const initArray = ['♜', '♟', '', '', '', '', '🨅', '🨂',
        '♞', '♟', '', '', '', '', '🨅', '🨄',
        '♝', '♟', '', '', '', '', '🨅', '🨃',
        '♛', '♟', '', '', '', '', '🨅', '🨀',
        '♚', '♟', '', '', '', '', '🨅', '🨁',
        '♝', '♟', '', '', '', '', '🨅', '🨃',
        '♞', '♟', '', '', '', '', '🨅', '🨄',
        '♜', '♟', '', '', '', '', '🨅', '🨂',
        '', '', '', '', '', '', '', '',
        '', '', '', '', '', '', '', '',
        '♙', '♙', '♙', '♙', '♙', '♙', '♙', '♙',
        '♖', '♘', '♗', '♕', '♔', '♗', '♘', '♖'];
    const [values, setValues] = useState(initArray); // board state
    const [selected, setSelected] = useState({ id: -1, value: false, piece: '', blockedArray: [], moved: [false, false, false, false, false, false, false, false, false], passant: -1 }); // trigger move state upon piece selection
    const [count, setCount] = useState(0); // count for fifty move rule
    const [repetitions, setRepetitions] = useState([]); // count for fivefold repetition rule
    const [firstOut, setFirstOut] = useState('');

    useEffect(() => {
        checkForCheck();
        checkForReps();
    }, [values]);

    useEffect(() => {
        checkForMate();
    }, [repetitions]);

    const whitePawnArray = [[[], [-1, -1, -1], [9]], [[0], [8, -1, -1], [10]], [[1], [9, -1, -1], [11]], [[2], [10, -1, -1], []], [[5], [-1, 13, -1], []], [[6], [-1, 14, -1], [12]], [[7], [-1, 15, -1], [13]], [[], [-1, -1, -1], [14]],
        [[], [-1, -1, -1], [1, 17]], [[8], [16, 0, -1], [2, 18]], [[9], [17, 1, -1], [3, 19]], [[10], [18, 2, -1], []], [[13], [5, 21, -1], []], [[14], [6, 22, -1], [20, 4]], [[15], [7, 23, -1], [21, 5]], [[], [-1, -1, -1], [22, 6]],
        [[], [-1, -1, -1], [9, 25]], [[16], [24, 8, -1], [10, 26]], [[17], [25, 9, -1], [11, 27]], [[18], [26, 10, -1], []], [[21], [13, 29, -1], []], [[22], [14, 30, -1], [28, 12]], [[23], [15, 31, -1], [29, 13]], [[], [-1, -1, -1], [30, 14]],
        [[], [-1, -1, -1], [17, 33]], [[24], [32, 16, -1], [18, 34]], [[25], [33, 17, -1], [19, 35]], [[26], [34, 18, -1], [67]], [[29], [21, 37, -1], [68]], [[30], [22, 38, -1], [36, 20]], [[31], [23, 39, -1], [37, 21]], [[], [-1, -1, -1], [38, 22]],
        [[], [-1, -1, -1], [25, 41]], [[32], [40, 24, -1], [26, 42]], [[33], [41, 25, -1], [27, 43]], [[34], [42, 26, -1], [66]], [[37], [29, 45, -1], [69]], [[38], [30, 46, -1], [44, 28]], [[39], [31, 47, -1], [45, 29]], [[], [-1, -1, -1], [46, 30]],
        [[], [-1, -1, -1], [33, 49]], [[40], [48, 32, -1], [34, 50]], [[41], [49, 33, -1], [35, 51]], [[42], [50, 34, -1], [67, 65]], [[45], [37, 53, -1], [70, 68]], [[46], [38, 54, -1], [52, 36]], [[47], [39, 55, -1], [53, 37]], [[], [-1, -1, -1], [54, 38]],
        [[], [-1, -1, -1], [41, 57]], [[48], [56, 40, -1], [42, 58]], [[49], [57, 41, -1], [43, 59]], [[50], [58, 42, -1], [66, 64]], [[53], [45, 61, -1], [71, 69]], [[54], [46, 62, -1], [60, 44]], [[55], [47, 63, -1], [61, 45]], [[], [-1, -1, -1], [62, 46]],
        [[], [-1, -1, -1], [49]], [[56], [-1, 48, -1], [50]], [[57], [-1, 49, -1], [51]], [[58], [-1, 50, -1], [65]], [[61], [53, -1, -1], [70]], [[62], [54, -1, -1], [52]], [[63], [55, -1, -1], [53]], [[], [-1, -1, -1], [54]],
        [[59], [-1, 51, -1], [73]], [[51], [59, 43, -1], [74, 72]], [[43], [51, 35, -1], [75, 73]], [[35], [43, 27, 36], [76, 74]], [[36], [28, 44, 35], [77, 75]], [[44], [36, 52, -1], [78, 76]], [[52], [44, 60, -1], [79, 77]], [[60], [52, -1, -1], [78]],
        [[64], [-1, 65, -1], [81]], [[65], [64, 66, -1], [82, 80]], [[66], [65, 67, -1], [83, 81]], [[67], [66, 68, -1], [84, 82]], [[68], [67, 69, -1], [85, 83]], [[69], [68, 70, -1], [86, 84]], [[70], [69, 71, -1], [87, 85]], [[71], [70, -1, -1], [86]],
        [[72, 64], [-1, 73, -1], [89]], [[73, 65], [72, 74, -1], [90, 88]], [[74, 66], [73, 75, -1], [91, 89]], [[75, 67], [74, 76, -1], [92, 90]], [[76, 68], [75, 77, -1], [93, 91]], [[77, 69], [76, 78, -1], [94, 92]], [[78, 70], [77, 79, -1], [95, 93]], [[79, 71], [78, -1, -1], [94]],
        [[80], [-1, 81, -1], []], [[81], [80, 82, -1], []], [[82], [81, 83, -1], []], [[83], [82, 84, -1], []], [[84], [83, 85, -1], []], [[85], [84, 86, -1], []], [[86], [85, 87, -1], []], [[87], [86, -1, -1], []]];

    const blackPawnArray = [[[1], [9, -1, -1], []], [[2, 3], [10, -1, -1], [8]], [[3], [11, -1, -1], [9]], [[4], [-1, 12, -1], [10]], [[5], [-1, 13, -1], [11]], [[6], [-1, 14, -1], [12]], [[7], [-1, 15, -1], [13]], [[], [-1, -1, -1], [14]],
        [[9], [17, 1, -1], []], [[10, 11], [18, 2, -1], [0, 16]], [[11], [19, 3, -1], [1, 17]], [[12], [4, 20, -1], [2, 18]], [[13], [5, 21, -1], [19, 3]], [[14], [6, 22, -1], [20, 4]], [[15], [7, 23, -1], [21, 5]], [[], [-1, -1, -1], [22, 6]],
        [[17], [25, 9, -1], []], [[18, 19], [26, 10, -1], [8, 24]], [[19], [27, 11, -1], [9, 25]], [[20], [12, 28, -1], [10, 26]], [[21], [13, 29, -1], [27, 11]], [[22], [14, 30, -1], [28, 12]], [[23], [15, 31, -1], [29, 13]], [[], [-1, -1, -1], [30, 14]],
        [[25], [33, 17, -1], []], [[26, 27], [34, 18, -1], [16, 32]], [[27], [35, 19, -1], [17, 33]], [[28], [20, 36, 67], [18, 34]], [[29], [21, 37, -1], [19]], [[30], [22, 38, -1], [36, 20]], [[31], [23, 39, -1], [37, 21]], [[], [-1, -1, -1], [38, 22]],
        [[33], [41, 25, -1], []], [[34, 35], [42, 26, -1], [24, 40]], [[35], [43, 27, -1], [25, 41]], [[67], [66, 68, 28], [26, 42]], [[37], [29, 45, -1], [27]], [[38], [30, 46, -1], [44, 28]], [[39], [31, 47, -1], [45, 29]], [[], [-1, -1, -1], [46, 30]],
        [[41], [49, 33, -1], []], [[42, 43], [50, 34, -1], [32, 48]], [[43], [51, 35, -1], [33, 49]], [[66], [65, 67, -1], [34, 50]], [[45], [37, 53, -1], []], [[46], [38, 54, -1], [52, 36]], [[47], [39, 55, -1], [53, 37]], [[], [-1, -1, -1], [54, 38]],
        [[49], [57, 41, -1], []], [[50, 51], [58, 42, -1], [40, 56]], [[51], [59, 43, -1], [41, 57]], [[65], [64, 66, -1], [42, 58]], [[53], [45, 61, -1], []], [[54], [46, 62, -1], [60, 44]], [[55], [47, 63, -1], [61, 45]], [[], [-1, -1, -1], [62, 46]],
        [[57], [-1, 49, -1], []], [[58, 59], [-1, 50, -1], [48]], [[59], [-1, 51, -1], [49]], [[64], [-1, 65, -1], [50]], [[61], [53, -1, -1], []], [[62], [54, -1, -1], [52]], [[63], [55, -1, -1], [53]], [[], [-1, -1, -1], [54]],
        [[72], [-1, 73, -1], [51]], [[73], [72, 74, -1], [43, 59]], [[74], [73, 75, -1], [35, 51]], [[75], [74, 76, -1], [43]], [[76], [75, 77, -1], [35]], [[77], [76, 78, -1], []], [[78], [77, 79, -1], []], [[79], [78, -1, -1], []],
        [[80], [-1, 81, -1], [65]], [[81], [80, 82, -1], [66, 64]], [[82], [81, 83, -1], [67, 65]], [[83], [82, 84, -1], [68, 66]], [[84], [83, 85, -1], [69, 67]], [[85], [84, 86, -1], [70, 68]], [[86], [85, 87, -1], [71, 69]], [[87], [86, -1, -1], [70]],
        [[88], [-1, 89, -1], [73]], [[89], [88, 90, -1], [74, 72]], [[90], [89, 91, -1], [75, 73]], [[91], [90, 92, -1], [76, 74]], [[92], [91, 93, -1], [77, 75]], [[93], [92, 94, -1], [78, 76]], [[94], [93, 95, -1], [79, 77]], [[95], [94, -1, -1], [78]],
        [[], [-1, -1, -1], [81]], [[], [-1, -1, -1], [82, 80]], [[], [-1, -1, -1], [83, 81]], [[], [-1, -1, -1], [84, 82]], [[], [-1, -1, -1], [85, 83]], [[], [-1, -1, -1], [86, 84]], [[], [-1, -1, -1], [87, 85]], [[], [-1, -1, -1], [86]]];

    const bichromePawnArray = [[[], [-1, -1, -1], [9]], [[0], [8, -1, -1], [10]], [[1], [9, -1, -1], [11]], [[2], [10, -1, -1], [12]], [[3], [11, -1, -1], [13]], [[4], [-1, 12, -1], [14]], [[5, 4], [-1, 13, -1], [15]], [[6], [-1, 14, -1], []],
        [[], [-1, -1, -1], [1, 17]], [[8], [16, 0, -1], [2, 18]], [[9], [17, 1, -1], [3, 19]], [[10], [18, 2, -1], [4, 20]], [[11], [19, 3, -1], [21, 5]], [[12], [4, 20, -1], [22, 6]], [[13, 12], [5, 21, -1], [23, 7]], [[14], [6, 22, -1], []],
        [[], [-1, -1, -1], [9, 25]], [[16], [24, 8, -1], [10, 26]], [[17], [25, 9, -1], [11, 27]], [[18], [26, 10, -1], [12, 28]], [[19], [27, 11, -1], [29, 13]], [[20], [12, 28, -1], [30, 14]], [[21, 20], [13, 29, -1], [31, 15]], [[22], [14, 30, -1], []],
        [[], [-1, -1, -1], [17, 33]], [[24], [32, 16, -1], [18, 34]], [[25], [33, 17, -1], [19, 35]], [[26], [34, 18, -1], [20]], [[27], [35, 19, 68], [37, 21]], [[28], [20, 36, -1], [38, 22]], [[29, 28], [21, 37, -1], [39, 23]], [[30], [22, 38, -1], []],
        [[], [-1, -1, -1], [25, 41]], [[32], [40, 24, -1], [26, 42]], [[33], [41, 25, -1], [27, 43]], [[34], [42, 26, -1], [28]], [[68], [67, 69, 27], [45, 29]], [[36], [28, 44, -1], [46, 30]], [[37, 36], [29, 45, -1], [47, 31]], [[38], [30, 46, -1], []],
        [[], [-1, -1, -1], [33, 49]], [[40], [48, 32, -1], [34, 50]], [[41], [49, 33, -1], [35, 51]], [[42], [50, 34, -1], []], [[69], [68, 70, -1], [53, 37]], [[44], [36, 52, -1], [54, 38]], [[45, 44], [37, 53, -1], [55, 39]], [[46], [38, 54, -1], []],
        [[], [-1, -1, -1], [41, 57]], [[48], [56, 40, -1], [42, 58]], [[49], [57, 41, -1], [43, 59]], [[50], [58, 42, -1], []], [[70], [69, 71, -1], [61, 45]], [[52], [44, 60, -1], [62, 46]], [[53, 52], [45, 61, -1], [63, 47]], [[54], [46, 62, -1], []],
        [[], [-1, -1, -1], [49]], [[56], [-1, 48, -1], [50]], [[57], [-1, 49, -1], [51]], [[58], [-1, 50, -1], []], [[71], [70, -1, -1], [53]], [[60], [52, -1, -1], [54]], [[61, 60], [53, -1, -1], [55]], [[62], [54, -1, -1], []],
        [[72], [-1, 73, -1], []], [[73], [72, 74, -1], []], [[74], [73, 75, -1], []], [[75], [74, 76, -1], [36]], [[76], [75, 77, -1], [44]], [[77], [76, 78, -1], [52, 36]], [[78], [77, 79, -1], [60, 44]], [[79], [78, -1, -1], [52]],
        [[80], [-1, 81, -1], [65]], [[81], [80, 82, -1], [66, 64]], [[82], [81, 83, -1], [67, 65]], [[83], [82, 84, -1], [68, 66]], [[84], [83, 85, -1], [69, 67]], [[85], [84, 86, -1], [70, 68]], [[86], [85, 87, -1], [71, 69]], [[87], [86, -1, -1], [70]],
        [[88], [-1, 89, -1], [73]], [[89], [88, 90, -1], [74, 72]], [[90], [89, 91, -1], [75, 73]], [[91], [90, 92, -1], [76, 74]], [[92], [91, 93, -1], [77, 75]], [[93], [92, 94, -1], [78, 76]], [[94], [93, 95, -1], [79, 77]], [[], [94, -1, -1], [78]],
        [[], [-1, -1, -1], [81]], [[], [-1, -1, -1], [82, 80]], [[], [-1, -1, -1], [83, 81]], [[], [-1, -1, -1], [84, 82]], [[], [-1, -1, -1], [85, 83]], [[], [-1, -1, -1], [86, 84]], [[], [-1, -1, -1], [87, 85]], [[], [-1, -1, -1], [86]]];

    const orthogonArray = [[[], [1, 2, 3, 4, 5, 6, 7], [8, 16, 24, 32, 40, 48, 56], []], [[0], [2, 3, 4, 5, 6, 7], [9, 17, 25, 33, 41, 49, 57], []], [[1, 0], [3, 4, 5, 6, 7], [10, 18, 26, 34, 42, 50, 58], []], [[2, 1, 0], [4, 5, 6, 7], [11, 19, 27, 35, 43, 51, 59], []], [[3, 2, 1, 0], [5, 6, 7], [], [12, 20, 28, 36, 44, 52, 60]], [[4, 3, 2, 1, 0], [6, 7], [], [13, 21, 29, 37, 45, 53, 61]], [[5, 4, 3, 2, 1, 0], [7], [], [14, 22, 30, 38, 46, 54, 62]], [[6, 5, 4, 3, 2, 1, 0], [], [], [15, 23, 31, 39, 47, 55, 63]],
        [[], [9, 10, 11, 12, 13, 14, 15], [16, 24, 32, 40, 48, 56], [0]], [[8], [10, 11, 12, 13, 14, 15], [17, 25, 33, 41, 49, 57], [1]], [[9, 8], [11, 12, 13, 14, 15], [18, 26, 34, 42, 50, 58], [2]], [[10, 9, 8], [12, 13, 14, 15], [19, 27, 35, 43, 51, 59], [3]], [[11, 10, 9, 8], [13, 14, 15], [4], [20, 28, 36, 44, 52, 60]], [[12, 11, 10, 9, 8], [14, 15], [5], [21, 29, 37, 45, 53, 61]], [[13, 12, 11, 10, 9, 8], [15], [6], [22, 30, 38, 46, 54, 62]], [[14, 13, 12, 11, 10, 9, 8], [], [7], [23, 31, 39, 47, 55, 63]],
        [[], [17, 18, 19, 20, 21, 22, 23], [24, 32, 40, 48, 56], [8, 0]], [[16], [18, 19, 20, 21, 22, 23], [25, 33, 41, 49, 57], [9, 1]], [[17, 16], [19, 20, 21, 22, 23], [26, 34, 42, 50, 58], [10, 2]], [[18, 17, 16], [20, 21, 22, 23], [27, 35, 43, 51, 59], [11, 3]], [[19, 18, 17, 16], [21, 22, 23], [12, 4], [28, 36, 44, 52, 60]], [[20, 19, 18, 17, 16], [22, 23], [13, 5], [29, 37, 45, 53, 61]], [[21, 20, 19, 18, 17, 16], [23], [14, 6], [30, 38, 46, 54, 62]], [[22, 21, 20, 19, 18, 17, 16], [], [15, 7], [31, 39, 47, 55, 63]],
        [[], [25, 26, 27, 28, 29, 30, 31], [32, 40, 48, 56], [16, 8, 0]], [[24], [26, 27, 28, 29, 30, 31], [33, 41, 49, 57], [17, 9, 1]], [[25, 24], [27, 28, 29, 30, 31], [34, 42, 50, 58], [18, 10, 2]], [[26, 25, 24], [28, 29, 30, 31], [35, 43, 51, 59], [19, 11, 3]], [[27, 26, 25, 24], [29, 30, 31], [20, 12, 4], [36, 44, 52, 60]], [[28, 27, 26, 25, 24], [30, 31], [21, 13, 5], [37, 45, 53, 61]], [[29, 28, 27, 26, 25, 24], [31], [22, 14, 6], [38, 46, 54, 62]], [[30, 29, 28, 27, 26, 25, 24], [], [23, 15, 7], [39, 47, 55, 63]],
        [[], [33, 34, 35, 67, 75, 83, 91], [40, 48, 56], [24, 16, 8, 0]], [[32], [34, 35, 67, 75, 83, 91], [41, 49, 57], [25, 17, 9, 1]], [[33, 32], [35, 67, 75, 83, 91], [42, 50, 58], [26, 18, 10, 2]], [[34, 33, 32], [67, 75, 83, 91], [43, 51, 59], [27, 19, 11, 3]], [[37, 38, 39], [68, 76, 84, 92], [28, 20, 12, 4], [44, 52, 60]], [[38, 39], [36, 68, 76, 84, 92], [29, 21, 13, 5], [45, 53, 61]], [[39], [37, 36, 68, 76, 84, 92], [30, 22, 14, 6], [46, 54, 62]], [[], [38, 37, 36, 68, 76, 84, 92], [31, 23, 15, 7], [47, 55, 63]],
        [[], [41, 42, 43, 66, 74, 82, 90], [48, 56], [32, 24, 16, 8, 0]], [[40], [42, 43, 66, 74, 82, 90], [49, 57], [33, 25, 17, 9, 1]], [[41, 40], [43, 66, 74, 82, 90], [50, 58], [34, 26, 18, 10, 2]], [[42, 41, 40], [66, 74, 82, 90], [51, 59], [35, 27, 19, 11, 3]], [[45, 46, 47], [69, 77, 85, 93], [36, 28, 20, 12, 4], [52, 60]], [[46, 47], [44, 69, 77, 85, 93], [37, 29, 21, 13, 5], [53, 61]], [[47], [45, 44, 69, 77, 85, 93], [38, 30, 22, 14, 6], [54, 62]], [[], [46, 45, 44, 69, 77, 85, 93], [39, 31, 23, 15, 7], [55, 63]],
        [[], [49, 50, 51, 65, 73, 81, 89], [56], [40, 32, 24, 16, 8, 0]], [[48], [50, 51, 65, 73, 81, 89], [57], [41, 33, 25, 17, 9, 1]], [[49, 48], [51, 65, 73, 81, 89], [58], [42, 34, 26, 18, 10, 2]], [[50, 49, 48], [65, 73, 81, 89], [59], [43, 35, 27, 19, 11, 3]], [[53, 54, 55], [70, 78, 86, 94], [44, 36, 28, 20, 12, 4], [60]], [[54, 55], [52, 70, 78, 86, 94], [45, 37, 29, 21, 13, 5], [61]], [[55], [53, 52, 70, 78, 86, 94], [46, 38, 30, 22, 14, 6], [62]], [[], [54, 53, 52, 70, 78, 86, 94], [47, 39, 31, 23, 15, 7], [63]],
        [[], [57, 58, 59, 64, 72, 80, 88], [], [48, 40, 32, 24, 16, 8, 0]], [[56], [58, 59, 64, 72, 80, 88], [], [49, 41, 33, 25, 17, 9, 1]], [[57, 56], [59, 64, 72, 80, 88], [], [50, 42, 34, 26, 18, 10, 2]], [[58, 57, 56], [64, 72, 80, 88], [], [51, 43, 35, 27, 19, 11, 3]], [[61, 62, 63], [71, 79, 87, 95], [52, 44, 36, 28, 20, 12, 4], []], [[62, 63], [60, 71, 79, 87, 95], [53, 45, 37, 29, 21, 13, 5], []], [[63], [61, 60, 71, 79, 87, 95], [54, 46, 38, 30, 22, 14, 6], []], [[], [62, 61, 60, 71, 79, 87, 95], [55, 47, 39, 31, 23, 15, 7], []],
        [[59, 58, 57, 56], [72, 80, 88], [], [65, 66, 67, 68, 69, 70, 71]], [[51, 50, 49, 48], [73, 81, 89], [64], [66, 67, 68, 69, 70, 71]], [[43, 42, 41, 40], [74, 82, 90], [65, 64], [67, 68, 69, 70, 71]], [[35, 34, 33, 32], [75, 83, 91], [66, 65, 64], [68, 69, 70, 71]], [[36, 37, 38, 39], [76, 84, 92], [67, 66, 65, 64], [69, 70, 71]], [[44, 45, 46, 47], [77, 85, 93], [68, 67, 66, 65, 64], [70, 71]], [[52, 53, 54, 55], [78, 86, 94], [69, 68, 67, 66, 65, 64], [71]], [[60, 61, 62, 63], [79, 87, 95], [70, 69, 68, 67, 66, 65, 64], []],
        [[64, 59, 58, 57, 56], [80, 88], [], [73, 74, 75, 76, 77, 78, 79]], [[65, 51, 50, 49, 48], [81, 89], [72], [74, 75, 76, 77, 78, 79]], [[66, 43, 42, 41, 40], [82, 90], [73, 72], [75, 76, 77, 78, 79]], [[67, 35, 34, 33, 32], [83, 91], [74, 73, 72], [76, 77, 78, 79]], [[68, 36, 37, 38, 39], [84, 92], [75, 74, 73, 72], [77, 78, 79]], [[69, 44, 45, 46, 47], [85, 93], [76, 75, 74, 73, 72], [78, 79]], [[70, 52, 53, 54, 55], [86, 94], [77, 76, 75, 74, 73, 72], [79]], [[71, 60, 61, 62, 63], [87, 95], [78, 77, 76, 75, 74, 73, 72], []],
        [[72, 64, 59, 58, 57, 56], [88], [], [81, 82, 83, 84, 85, 86, 87]], [[73, 65, 51, 50, 49, 48], [89], [80], [82, 83, 84, 85, 86, 87]], [[74, 66, 43, 42, 41, 40], [90], [81, 80], [83, 84, 85, 86, 87]], [[75, 67, 35, 34, 33, 32], [91], [82, 81, 80], [84, 85, 86, 87]], [[76, 68, 36, 37, 38, 39], [92], [83, 82, 81, 80], [85, 86, 87]], [[77, 69, 44, 45, 46, 47], [93], [84, 83, 82, 81, 80], [86, 87]], [[78, 70, 52, 53, 54, 55], [94], [85, 84, 83, 82, 81, 80], [87]], [[79, 71, 60, 61, 62, 63], [95], [86, 85, 84, 83, 82, 81, 80], []],
        [[80, 72, 64, 59, 58, 57, 56], [], [], [89, 90, 91, 92, 93, 94, 95]], [[81, 73, 65, 51, 50, 49, 48], [], [88], [90, 91, 92, 93, 94, 95]], [[82, 74, 66, 43, 42, 41, 40], [], [89, 88], [91, 92, 93, 94, 95]], [[83, 75, 67, 35, 34, 33, 32], [], [90, 89, 88], [92, 93, 94, 95]], [[84, 76, 68, 36, 37, 38, 39], [], [91, 90, 89, 88], [93, 94, 95]], [[85, 77, 69, 44, 45, 46, 47], [], [92, 91, 90, 89, 88], [94, 95]], [[86, 78, 70, 52, 53, 54, 55], [], [93, 92, 91, 90, 89, 88], [95]], [[87, 79, 71, 60, 61, 62, 63], [], [94, 93, 92, 91, 90, 89, 88], []]];

    const diagonArray = [[[], [], [9, 18, 27, 36, 45, 54, 63], [], [9, 18, 27, 67, 74, 81, 88]], [[8], [], [], [10, 19, 28, 37, 46, 55], []], [[9, 16], [], [], [11, 20, 29, 38, 47], []], [[10, 17, 24], [], [], [12, 21, 30, 39], []], [[11, 18, 25, 32], [], [], [13, 22, 31], []], [[12, 19, 26, 33, 40], [], [], [14, 23], []], [[13, 20, 27, 34, 41, 48], [], [], [15], []], [[14, 21, 28, 35, 42, 49, 56], [], [], [], [14, 21, 28, 68, 77, 86, 95]],
        [[], [1], [17, 26, 35, 66, 73, 80], [], []], [[16], [2], [18, 27, 36, 45, 54, 63], [0], [18, 27, 67, 74, 81, 88]], [[17, 24], [3], [1], [19, 28, 37, 46, 55], []], [[18, 25, 32], [4], [2], [20, 29, 38, 47], []], [[19, 26, 33, 40], [5], [3], [21, 30, 39], []], [[20, 27, 34, 41, 48], [6], [4], [22, 31], []], [[21, 28, 35, 42, 49, 56], [7], [5], [23], [21, 28, 68, 77, 86, 95]], [[], [22, 29, 36, 69, 78, 87], [6], [], []],
        [[], [9, 2], [25, 34, 43, 65, 72], [], []], [[24], [10, 3], [26, 35, 66, 73, 80], [8], []], [[25, 32], [11, 4], [27, 36, 45, 54, 63], [9, 0], [27, 67, 74, 81, 88]], [[26, 33, 40], [12, 5], [10, 1], [28, 37, 46, 55], []], [[27, 34, 41, 48], [13, 6], [11, 2], [29, 38, 47], []], [[28, 35, 42, 49, 56], [14, 7], [12, 3], [30, 39], [28, 68, 77, 86, 95]], [[15], [29, 36, 69, 78, 87], [13, 4], [31], []], [[], [30, 37, 44, 70, 79], [14, 5], [], []],
        [[], [17, 10, 3], [33, 42, 51, 64], [], []], [[32], [18, 11, 4], [34, 43, 65, 72], [16], []], [[33, 40], [19, 12, 5], [35, 66, 73, 80], [17, 8], []], [[34, 41, 48], [20, 13, 6], [36, 45, 54, 63], [18, 9, 0], [67, 74, 81, 88]], [[35, 42, 49, 56], [21, 14, 7], [19, 10, 1], [37, 46, 55], [68, 77, 86, 95]], [[22, 15], [36, 69, 78, 87], [20, 11, 2], [38, 47], []], [[23], [37, 44, 70, 79], [21, 12, 3], [39], []], [[], [38, 45, 52, 71], [22, 13, 4], [], []],
        [[], [25, 18, 11, 4], [41, 50, 59], [], []], [[40], [26, 19, 12, 5], [42, 51, 64], [24], []], [[41, 48], [27, 20, 13, 6], [43, 65, 72], [25, 16], []], [[42, 49, 56], [28, 21, 14, 7], [66, 73, 80], [26, 17, 8], [68, 77, 86, 95]], [[29, 22, 15], [69, 78, 87], [45, 54, 63], [27, 18, 9, 0], [67, 74, 81, 88]], [[30, 23], [44, 70, 79], [28, 19, 10, 1], [46, 55], []], [[31], [45, 52, 71], [29, 20, 11, 2], [47], []], [[], [46, 53, 60], [30, 21, 12, 3], [], []],
        [[], [33, 26, 19, 12, 5], [49, 58], [], []], [[48], [34, 27, 20, 13, 6], [50, 59], [32], []], [[49, 56], [35, 28, 21, 14, 7], [51, 64], [33, 24], [35, 68, 77, 86, 95]], [[67, 76, 85, 94], [50, 57], [65, 72], [34, 25, 16], []], [[37, 30, 23], [70, 79], [53, 62], [68, 75, 82, 89], []], [[38, 31], [52, 71], [54, 63], [36, 27, 18, 9, 0], [36, 67, 74, 81, 88]], [[39], [53, 60], [37, 28, 19, 10, 1], [55], []], [[], [54, 61], [38, 29, 20, 11, 2], [], []],
        [[], [41, 34, 27, 20, 13, 6], [57], [], []], [[56], [42, 35, 28, 21, 14, 7], [58], [40], [42, 35, 68, 77, 86, 95]], [[43, 67, 76, 85, 94], [57], [59], [41, 32], []], [[66, 75, 84, 93], [58], [64], [42, 33, 24], []], [[45, 38, 31], [71], [61], [69, 76, 83, 90], []], [[46, 39], [60], [62], [44, 68, 75, 82, 89], []], [[47], [61], [63], [45, 36, 27, 18, 9, 0], [45, 36, 67, 74, 81, 88]], [[], [62], [46, 37, 28, 19, 10, 1], [], []],
        [[], [49, 42, 35, 28, 21, 14, 7], [], [], [49, 42, 35, 68, 77, 86, 95]], [[50, 43, 67, 76, 85, 94], [], [], [48], []], [[51, 66, 75, 84, 93], [], [], [49, 40], []], [[65, 74, 83, 92], [], [], [50, 41, 32], []], [[53, 46, 39], [], [], [70, 77, 84, 91], []], [[54, 47], [], [], [52, 69, 76, 83, 90], []], [[55], [], [], [53, 44, 68, 75, 82, 89], []], [[], [], [], [54, 45, 36, 27, 18, 9, 0], [54, 45, 36, 67, 74, 81, 88]],
        [[73, 82, 91], [], [], [51, 42, 33, 24], []], [[74, 83, 92], [59], [72], [43, 34, 25, 16], []], [[75, 84, 93], [51, 58], [73, 80], [35, 26, 17, 8], []], [[76, 85, 94], [43, 50, 57], [36, 45, 54, 63], [27, 18, 9, 0], [74, 81, 88]], [[35, 42, 59, 56], [28, 21, 14, 7], [44, 53, 62], [75, 82, 89], [77, 86, 95]], [[36, 29, 22, 15], [78, 87], [52, 61], [76, 83, 90], []], [[44, 37, 30, 23], [79], [60], [77, 84, 91], []], [[52, 45, 38, 31], [], [], [78, 85, 92], []],
        [[81, 90], [], [], [65, 43, 34, 25, 16], []], [[82, 91], [64], [80], [66, 35, 26, 17, 8], []], [[83, 92], [65, 59], [67, 36, 45, 54, 63], [67, 27, 18, 9, 0], [81, 88]], [[84, 93], [66, 51, 58], [68, 44, 53, 62], [82, 89], []], [[85, 94], [67, 43, 50, 57], [69, 52, 61], [83, 90], []], [[68, 35, 42, 49, 56], [68, 28, 21, 14, 7], [70, 60], [84, 91], [86, 95]], [[69, 36, 29, 22, 15], [87], [71], [85, 92], []], [[70, 44, 37, 30, 23], [], [], [86, 93], []],
        [[89], [], [], [73, 66, 35, 26, 17, 8], []], [[90], [72], [74, 67, 36, 45, 54, 63], [74, 67, 27, 18, 9, 0], [88]], [[91], [73, 64], [75, 68, 44, 53, 62], [89], []], [[92], [74, 65, 59], [76, 69, 52, 61], [90], []], [[93], [75, 66, 51, 58], [77, 70, 60], [91], []], [[94], [76, 67, 43, 50, 57], [78, 71], [92], []], [[77, 68, 35, 42, 49, 56], [77, 68, 28, 21, 14, 7], [79], [93], [95]], [[78, 69, 36, 29, 22, 15], [], [], [94], []],
        [[], [], [81, 74, 67, 36, 45, 54, 63], [81, 74, 67, 27, 18, 9, 0], []], [[], [80], [82, 75, 68, 44, 53, 62], [], []], [[], [81, 72], [83, 76, 69, 52, 61], [], []], [[], [82, 73, 64], [84, 77, 70, 60], [], []], [[], [83, 74, 65, 59], [85, 78, 71], [], []], [[], [84, 75, 66, 51, 58], [86, 79], [], []], [[], [85, 76, 67, 43, 50, 57], [87], [], []], [[86, 77, 68, 35, 42, 49, 56], [86, 77, 68, 28, 21, 14, 7], [], [], []]];

    const diagonArrayAlt = [[[9, 18, 27], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[14, 21, 28], []],
        [[], []], [[18, 27], [0]], [[], []], [[], []], [[], []], [[], []], [[21, 28], [7]], [[], []],
        [[], []], [[], []], [[27], [9, 0]], [[], []], [[], []], [[28], [14, 7]], [[], []], [[], []],
        [[], []], [[], []], [[], []], [[], [18, 9, 0]], [[], [21, 14, 7]], [[], []], [[], []], [[], []],
        [[], []], [[], []], [[], []], [[], [42, 49, 56]], [[], [45, 54, 63]], [[], []], [[], []], [[], []],
        [[], []], [[], []], [[35], [49, 56]], [[], []], [[], []], [[36], [54, 63]], [[], []], [[], []],
        [[], []], [[42, 35], [56]], [[], []], [[], []], [[], []], [[], []], [[45, 36], [63]], [[], []],
        [[49, 42, 35], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[54, 45, 36], []],
        [[], []], [[], []], [[], []], [[], [74, 81, 88]], [[], [77, 86, 95]], [[], []], [[], []], [[], []],
        [[], []], [[], []], [[67], [81, 88]], [[], []], [[], []], [[68], [86, 95]], [[], []], [[], []],
        [[], []], [[74, 67], [88]], [[], []], [[], []], [[], []], [[], []], [[77, 68], [95]], [[], []],
        [[81, 74, 67], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[86, 77, 68], []]];

    const kingArray = [[1, 8, 9], [0, 2, 9, 8, 10], [1, 3, 10, 9, 11], [2, 4, 11, 10, 12], [3, 5, 12, 11, 13], [4, 6, 13, 12, 14], [5, 7, 14, 13, 15], [6, 15, 14],
        [9, 16, 0, 1, 17], [8, 10, 17, 1, 16, 2, 18, 0], [9, 11, 18, 2, 17, 3, 1, 19], [10, 12, 19, 3, 18, 4, 2, 20], [11, 13, 4, 20, 19, 5, 3, 21], [12, 14, 5, 21, 20, 6, 4, 22], [13, 15, 6, 22, 21, 7, 5, 23], [14, 7, 23, 22, 6],
        [17, 24, 8, 9, 25], [16, 18, 25, 9, 24, 10, 26, 8], [17, 19, 26, 10, 25, 11, 27, 9], [18, 20, 27, 11, 26, 12, 10, 28], [19, 21, 12, 28, 27, 13, 11, 29], [20, 22, 13, 29, 28, 14, 12, 30, 28], [21, 23, 14, 30, 15, 29, 13, 31], [22, 15, 31, 30, 14],
        [25, 32, 16, 17, 33], [24, 26, 33, 17, 32, 18, 34, 16], [25, 27, 34, 18, 33, 19, 35, 17], [26, 28, 35, 19, 34, 20, 36, 18, 67], [27, 29, 20, 36, 35, 21, 19, 37, 68], [28, 30, 21, 37, 22, 36, 20, 38], [29, 31, 22, 38, 23, 37, 21, 39], [30, 23, 39, 38, 22],
        [33, 40, 24, 25, 41], [32, 34, 41, 25, 40, 26, 42, 24], [33, 35, 42, 26, 41, 27, 43, 25], [34, 67, 43, 27, 42, 28, 66, 26, 68], [37, 68, 28, 44, 29, 69, 45, 27, 67], [38, 36, 29, 45, 30, 44, 28, 46], [39, 37, 30, 46, 31, 45, 29, 47], [38, 31, 47, 46, 30],
        [41, 48, 32, 33, 49], [40, 42, 49, 33, 48, 34, 50, 32], [41, 43, 50, 34, 49, 35, 51, 33], [42, 66, 51, 35, 67, 50, 65, 34], [45, 69, 36, 52, 37, 70, 53, 68], [46, 44, 37, 53, 38, 52, 54, 36], [47, 45, 38, 54, 39, 53, 37, 55], [46, 39, 55, 54, 38],
        [49, 56, 40, 41, 57], [48, 50, 57, 41, 56, 42, 58, 40], [49, 51, 58, 42, 43, 57, 59, 41], [50, 65, 59, 43, 66, 58, 64, 42], [53, 70, 44, 60, 45, 71, 61, 69], [54, 52, 45, 61, 46, 60, 62, 44], [55, 53, 46, 62, 47, 61, 63, 45], [54, 47, 63, 62, 46],
        [57, 48, 49, 49], [56, 58, 49, 50, 48], [57, 59, 50, 51, 49], [58, 64, 51, 65, 50], [61, 71, 52, 53, 70], [62, 60, 53, 54, 52], [63, 61, 54, 55, 53], [62, 55, 54],
        [59, 72, 65, 73, 51], [51, 73, 64, 66, 74, 59, 72, 43], [43, 74, 65, 67, 75, 51, 73, 35], [35, 75, 66, 68, 76, 43, 36, 27, 74], [36, 76, 67, 69, 35, 28, 44, 75, 77], [44, 77, 68, 70, 36, 78, 52, 76], [52, 78, 69, 71, 44, 79, 60, 77], [60, 79, 70, 52, 78],
        [64, 80, 73, 81, 65], [65, 81, 72, 74, 82, 64, 80, 66], [66, 82, 73, 75, 83, 65, 67, 81], [67, 83, 74, 76, 84, 66, 68, 82], [68, 84, 75, 77, 85, 67, 69, 83], [69, 85, 76, 78, 68, 70, 84, 86], [70, 86, 77, 79, 69, 87, 71, 85], [71, 87, 78, 70, 86],
        [72, 88, 81, 89, 73], [73, 89, 80, 82, 90, 72, 74, 88], [74, 90, 81, 83, 91, 73, 75, 89], [75, 91, 82, 84, 92, 74, 76, 90], [76, 92, 83, 85, 93, 75, 77, 91], [77, 93, 84, 86, 94, 76, 78, 92], [78, 94, 85, 87, 77, 79, 93, 95], [79, 95, 86, 78, 94],
        [80, 89, 81, 81], [81, 88, 90, 80, 82], [82, 89, 91, 81, 83], [83, 90, 92, 82, 84], [84, 91, 93, 83, 85], [85, 92, 94, 84, 86], [86, 93, 95, 85, 87], [87, 94, 86]];

    const knightArray = [[17, 10], [16, 18, 11], [8, 17, 19, 12], [9, 18, 20, 13], [10, 19, 21, 14], [11, 20, 22, 15], [12, 21, 23], [13, 22],
        [25, 18, 2], [24, 26, 19, 3], [16, 25, 27, 20, 4, 0], [17, 26, 28, 21, 5, 1], [18, 27, 29, 22, 6, 2], [19, 28, 30, 23, 7, 3], [20, 29, 31, 4], [21, 30, 5],
        [33, 26, 10, 1], [32, 34, 27, 11, 2, 0], [24, 33, 35, 28, 12, 3, 1, 8], [25, 34, 67, 36, 29, 13, 4, 2, 9], [26, 35, 68, 37, 30, 14, 5, 3, 10], [27, 36, 38, 31, 15, 6, 4, 11], [28, 37, 39, 7, 5, 12], [29, 38, 6, 13],
        [41, 34, 18, 9], [40, 42, 35, 19, 10, 8], [32, 41, 43, 67, 36, 20, 11, 9, 16], [33, 42, 66, 75, 44, 37, 21, 12, 10, 17], [34, 43, 76, 69, 45, 38, 22, 13, 11, 18], [35, 68, 44, 46, 39, 23, 14, 12, 19], [36, 45, 47, 15, 13, 20], [37, 46, 14, 21],
        [49, 42, 26, 17], [48, 50, 43, 27, 18, 16], [40, 49, 51, 66, 68, 28, 19, 17, 24], [41, 50, 65, 74, 76, 69, 29, 20, 18, 25], [66, 75, 77, 70, 53, 46, 30, 21, 19, 26], [67, 69, 52, 54, 47, 31, 22, 20, 27], [44, 53, 55, 23, 21, 28], [45, 54, 22, 29],
        [57, 50, 34, 25], [56, 58, 51, 35, 26, 24], [48, 57, 59, 65, 67, 27, 25, 32], [49, 58, 64, 73, 75, 68, 28, 26, 33], [67, 76, 78, 71, 61, 54, 38, 29, 27], [68, 70, 60, 62, 55, 39, 30, 28], [36, 52, 61, 63, 31, 29], [37, 53, 62, 30],
        [58, 42, 25], [59, 43, 34, 32], [56, 64, 66, 35, 33, 40], [57, 72, 74, 67, 34, 41], [68, 77, 79, 62, 46, 37], [69, 71, 63, 47, 38, 36], [44, 60, 39, 37], [45, 61, 38],
        [50, 41], [51, 42, 40], [65, 43, 41, 48], [73, 66, 42, 49], [69, 78, 54, 45], [44, 70, 55, 46], [52, 47, 45], [53, 46],
        [81, 74, 43, 50], [80, 82, 75, 35, 42, 58], [72, 81, 83, 76, 36, 27, 34, 50, 59], [73, 82, 84, 77, 44, 37, 19, 26, 42, 51], [74, 83, 85, 78, 52, 45, 29, 20, 34, 43], [75, 84, 86, 79, 60, 53, 37, 28, 35], [76, 85, 87, 61, 45, 36], [77, 86, 53, 44],
        [89, 82, 66, 51], [88, 90, 83, 67, 43, 59], [80, 89, 91, 84, 68, 35, 51, 64], [81, 90, 92, 85, 69, 36, 27, 43, 65], [82, 91, 93, 86, 70, 44, 28, 35, 66], [83, 92, 94, 87, 71, 52, 36, 67], [84, 93, 95, 60, 44, 68], [85, 94, 52, 69],
        [90, 74, 65], [91, 75, 66, 64], [88, 92, 76, 67, 65, 72], [89, 93, 77, 68, 66, 73], [90, 94, 78, 69, 67, 74], [91, 95, 79, 70, 68, 75], [92, 71, 69, 76], [93, 70, 77],
        [82, 73], [83, 74, 72], [84, 75, 73, 80], [85, 76, 74, 81], [86, 77, 75, 82], [87, 78, 76, 83], [79, 77, 84], [78, 85]];

    const verticalArray = [0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 1, 1, 1, 1, 1,
        2, 2, 2, 2, 2, 2, 2, 2,
        3, 3, 3, 3, 3, 3, 3, 3,
        4, 4, 4, 4, 8, 8, 8, 8,
        5, 5, 5, 5, 9, 9, 9, 9,
        6, 6, 6, 6, 10, 10, 10, 10,
        7, 7, 7, 7, 11, 11, 11, 11,
        7, 6, 5, 4, 8, 9, 10, 11,
        7, 6, 5, 4, 8, 9, 10, 11,
        7, 6, 5, 4, 8, 9, 10, 11,
        7, 6, 5, 4, 8, 9, 10, 11];

    const horizontalArray = [0, 1, 2, 3, 4, 5, 6, 7,
        0, 1, 2, 3, 4, 5, 6, 7,
        0, 1, 2, 3, 4, 5, 6, 7,
        0, 1, 2, 3, 4, 5, 6, 7,
        0, 1, 2, 3, 4, 5, 6, 7,
        0, 1, 2, 3, 4, 5, 6, 7,
        0, 1, 2, 3, 4, 5, 6, 7,
        0, 1, 2, 3, 4, 5, 6, 7,
        8, 8, 8, 8, 8, 8, 8, 8,
        9, 9, 9, 9, 9, 9, 9, 9,
        10, 10, 10, 10, 10, 10, 10, 10,
        11, 11, 11, 11, 11, 11, 11, 11];

    const diagonalArrayA = [0, 1, 2, 3, 4, 5, 6, 7,
        1, 2, 3, 4, 5, 6, 7, 8,
        2, 3, 4, 5, 6, 7, 8, 9,
        3, 4, 5, 6, 7, 8, 9, 10,
        4, 5, 6, 7, 8, 9, 10, 11,
        5, 6, 7, 15, 9, 10, 11, 12,
        6, 7, 15, 16, 10, 11, 12, 13,
        7, 15, 16, 17, 11, 12, 13, 14,
        18, 17, 16, 15, 7, 8, 9, 10,
        19, 18, 17, 16, 15, 7, 8, 9,
        20, 19, 18, 17, 16, 15, 7, 8,
        21, 20, 19, 18, 17, 16, 15, 7];

    const diagonalArrayB = [7, 8, 9, 10, 11, 12, 13, 14,
        6, 7, 8, 9, 10, 11, 12, 13,
        5, 6, 7, 8, 9, 10, 11, 12,
        4, 5, 6, 7, 8, 9, 10, 11,
        3, 4, 5, 6, 7, 8, 9, 10,
        2, 3, 4, 5, 15, 7, 8, 9,
        1, 2, 3, 4, 16, 15, 7, 8,
        0, 1, 2, 3, 17, 16, 15, 7,
        4, 5, 6, 7, 15, 16, 17, 18,
        5, 6, 7, 15, 16, 17, 18, 19,
        6, 7, 15, 16, 17, 18, 19, 20,
        7, 15, 16, 17, 18, 19, 20, 21];

    const threeArrayA = [7, 14, 21, 28];

    const threeArrayB = [35, 42, 49, 56];

    const threeArrayC = [68, 77, 86, 95];

    const threeArrayD = [0, 9, 18, 27];

    const threeArrayE = [36, 45, 54, 63];

    const threeArrayF = [67, 74, 81, 88];

    const whitePieces = (piece) => {
        return piece == '♙' || piece == '♖' || piece == '♘' || piece == '♗' || piece == '♕';
    }

    const blackPieces = (piece) => {
        return piece == '♟' || piece == '♜' || piece == '♞' || piece == '♝' || piece == '♛';
    }

    const bichromePieces = (piece) => {
        return piece == '🨅' || piece == '🨂' || piece == '🨄' || piece == '🨃' || piece == '🨁';
    }

    const checkForPiece = (piece, array) => {
        var aa = values.findIndex(value => value == piece);
        var bb = values.findLastIndex(value => value == piece);
        if (aa == bb && aa != -1) {
            array.push(aa);
        } else if (aa != -1) {
            array.push(aa);
            array.push(bb);
        }
    }

    const checkForDistanceCheck = (index, array, small1, small2, queen1, queen2, king) => {
        return (array[index]).some(value => {
            for (let i = 0; i < value.length; i++) {
                var a = values[value[i]];
                if (a != '') {
                    if (a == small1 || a == queen1 || a == small2 || a == queen2) {
                        return true;
                    } else if (a == king && i == 0) {
                        continue;
                    }
                    break;
                }
            }
        });
    }

    const checkForCloseCheck = (array, piece) => {
        return array.some(value => values[value] == piece);
    }

    const arrayModifier = (id, newVal) => {
        setValues(values => values.map((value, index) => (index == id ? newVal : value)));
    }

    const playerModifier = (func) => {
        (firstOut == '') ? ((player == 'White') ? func('Black') : ((player == 'Black') ? func('Bichrome') : func('White'))) :
            ((firstOut == 'White') ? ((player == 'Black') ? func('Bichrome') : func('Black')) :
                ((firstOut == 'Black' ? ((player == 'White') ? func('Bichrome') : func('White')) :
                    ((player == 'White') ? func('Black') : func('White')))));
    }

    const reset = () => {
        setValues(initArray);
        setPlayer('White');
        setWin('');
        setSelected({ id: -1, value: false, piece: '', blockedArray: [], moved: [false, false, false, false, false, false, false, false, false], passant: -1 });
        setCount(0);
        setRepetitions([]);
        setFirstOut('');
    }

    const checkForBlocked = () => {
        var blockedArray = [];
        values.forEach((value, index) => {
            var a = checkForMovement(index);
            if (a.length <= 1) {
                blockedArray.push(index);
            }
        });
        setSelected({ id: selected.id, value: selected.value, piece: selected.piece, blockedArray: blockedArray, moved: selected.moved, passant: selected.passant });
        return blockedArray;
    }

    const checkForCheckWhite = (index) => {
        if (checkForDistanceCheck(index, orthogonArray, '♜', '🨂', '♛', '🨁', '♔')) {
            return true;
        }
        if (checkForDistanceCheck(index, diagonArray, '♝', '🨃', '♛', '🨁', '♔')) {
            return true;
        }
        if (checkForCloseCheck(kingArray[index], '♚')) {
            return true;
        }
        if (checkForCloseCheck(kingArray[index], '🨀')) {
            return true;
        }
        if (checkForCloseCheck((blackPawnArray[index])[2], '♟')) {
            return true;
        }
        if (checkForCloseCheck((bichromePawnArray[index])[2], '🨅')) {
            return true;
        }
        if (checkForCloseCheck(knightArray[index], '♞')) {
            return true;
        }
        if (checkForCloseCheck(knightArray[index], '🨄')) {
            return true;
        }
        return false;
    }

    const checkForCheckBlack = (index) => {
        if (checkForDistanceCheck(index, orthogonArray, '♖', '🨂', '♕', '🨁', '♚')) {
            return true;
        }
        if (checkForDistanceCheck(index, diagonArray, '♗', '🨃', '♕', '🨁', '♚')) {
            return true;
        }
        if (checkForCloseCheck(kingArray[index], '♔')) {
            return true;
        }
        if (checkForCloseCheck(kingArray[index], '🨀')) {
            return true;
        }
        if (checkForCloseCheck((whitePawnArray[index])[2], '♙')) {
            return true;
        }
        if (checkForCloseCheck((bichromePawnArray[index])[2], '🨅')) {
            return true;
        }
        if (checkForCloseCheck(knightArray[index], '♘')) {
            return true;
        }
        if (checkForCloseCheck(knightArray[index], '🨄')) {
            return true;
        }
        return false;
    }

    const checkForCheckBichrome = (index) => {
        if (checkForDistanceCheck(index, orthogonArray, '♖', '♜', '♕', '♛', '🨀')) {
            return true;
        }
        if (checkForDistanceCheck(index, diagonArray, '♗', '♝', '♕', '♛', '🨀')) {
            return true;
        }
        if (checkForCloseCheck(kingArray[index], '♔')) {
            return true;
        }
        if (checkForCloseCheck(kingArray[index], '♚')) {
            return true;
        }
        if (checkForCloseCheck((whitePawnArray[index])[2], '♙')) {
            return true;
        }
        if (checkForCloseCheck((blackPawnArray[index])[2], '♟')) {
            return true;
        }
        if (checkForCloseCheck(knightArray[index], '♘')) {
            return true;
        }
        if (checkForCloseCheck(knightArray[index], '♞')) {
            return true;
        }
        return false;
    }

    const checkForDiscoverCheckBase = (pieces, direction, array, discArray, small1, small2, queen1, queen2) => {
        var disc = -1;
        for (let i = 0; i < array.length; i++) {
            var a = values[array[i]];
            if (a != '') {
                if (pieces(a)) {
                    if (disc == -1) {
                        disc = array[i];
                        continue;
                    }
                    break;
                } else if (disc > -1) {
                    if (a == small1 || a == queen1 || a == small2 || a == queen2) {
                        discArray.push([direction, disc, array[i]]);
                        break;
                    }
                    break;
                }
                break;
            }
        }
    }

    const checkForDiscoverCheckWhite = (index) => {
        var discoverArray = [];
        checkForDiscoverCheckBase(whitePieces, 'up', (orthogonArray[index])[0], discoverArray, '♜', '🨂', '♛', '🨁');
        checkForDiscoverCheckBase(whitePieces, 'down', (orthogonArray[index])[1], discoverArray, '♜', '🨂', '♛', '🨁');
        checkForDiscoverCheckBase(whitePieces, 'left', (orthogonArray[index])[2], discoverArray, '♜', '🨂', '♛', '🨁');
        checkForDiscoverCheckBase(whitePieces, 'right', (orthogonArray[index])[3], discoverArray, '♜', '🨂', '♛', '🨁');
        checkForDiscoverCheckBase(whitePieces, 'upLeft', (diagonArray[index])[0], discoverArray, '♝', '🨃', '♛', '🨁');
        checkForDiscoverCheckBase(whitePieces, 'downRight', (diagonArray[index])[1], discoverArray, '♝', '🨃', '♛', '🨁');
        checkForDiscoverCheckBase(whitePieces, 'upRight', (diagonArray[index])[2], discoverArray, '♝', '🨃', '♛', '🨁');
        checkForDiscoverCheckBase(whitePieces, 'downLeft', (diagonArray[index])[3], discoverArray, '♝', '🨃', '♛', '🨁');
        checkForDiscoverCheckBase(whitePieces, 'extra', (diagonArray[index])[4], discoverArray, '♝', '🨃', '♛', '🨁');
        return discoverArray;
    }

    const checkForDiscoverCheckBlack = (index) => {
        var discoverArray = [];
        checkForDiscoverCheckBase(blackPieces, 'up', (orthogonArray[index])[0], discoverArray, '♖', '🨂', '♕', '🨁');
        checkForDiscoverCheckBase(blackPieces, 'down', (orthogonArray[index])[1], discoverArray, '♖', '🨂', '♕', '🨁');
        checkForDiscoverCheckBase(blackPieces, 'left', (orthogonArray[index])[2], discoverArray, '♖', '🨂', '♕', '🨁');
        checkForDiscoverCheckBase(blackPieces, 'right', (orthogonArray[index])[3], discoverArray, '♖', '🨂', '♕', '🨁');
        checkForDiscoverCheckBase(blackPieces, 'upLeft', (diagonArray[index])[0], discoverArray, '♗', '🨃', '♕', '🨁');
        checkForDiscoverCheckBase(blackPieces, 'downRight', (diagonArray[index])[1], discoverArray, '♗', '🨃', '♕', '🨁');
        checkForDiscoverCheckBase(blackPieces, 'upRight', (diagonArray[index])[2], discoverArray, '♗', '🨃', '♕', '🨁');
        checkForDiscoverCheckBase(blackPieces, 'downLeft', (diagonArray[index])[3], discoverArray, '♗', '🨃', '♕', '🨁');
        checkForDiscoverCheckBase(blackPieces, 'extra', (diagonArray[index])[4], discoverArray, '♗', '🨃', '♕', '🨁');
        return discoverArray;
    }

    const checkForDiscoverCheckBichrome = (index) => {
        var discoverArray = [];
        checkForDiscoverCheckBase(bichromePieces, 'up', (orthogonArray[index])[0], discoverArray, '♖', '♜', '♕', '♛');
        checkForDiscoverCheckBase(bichromePieces, 'down', (orthogonArray[index])[1], discoverArray, '♖', '♜', '♕', '♛');
        checkForDiscoverCheckBase(bichromePieces, 'left', (orthogonArray[index])[2], discoverArray, '♖', '♜', '♕', '♛');
        checkForDiscoverCheckBase(bichromePieces, 'right', (orthogonArray[index])[3], discoverArray, '♖', '♜', '♕', '♛');
        checkForDiscoverCheckBase(bichromePieces, 'upLeft', (diagonArray[index])[0], discoverArray, '♗', '♝', '♕', '♛');
        checkForDiscoverCheckBase(bichromePieces, 'downRight', (diagonArray[index])[1], discoverArray, '♗', '♝', '♕', '♛');
        checkForDiscoverCheckBase(bichromePieces, 'upRight', (diagonArray[index])[2], discoverArray, '♗', '♝', '♕', '♛');
        checkForDiscoverCheckBase(bichromePieces, 'downLeft', (diagonArray[index])[3], discoverArray, '♗', '♝', '♕', '♛');
        checkForDiscoverCheckBase(bichromePieces, 'extra', (diagonArray[index])[4], discoverArray, '♗', '♝', '♕', '♛');
        return discoverArray;
    }

    const checkForDiscoverCheckPawn = (index, array, pawn, bishop1, bishop2, queen1, queen2) => {
        var discArray = [];
        ((array[index])[1]).forEach((value, ind) => {
            var disc = -1;
            switch (ind) {
                case 0:
                    if (value > -1) {
                        for (let i = value; i > -1; i = ((array[i])[1])[0]) {
                            if (values[i] != '') {
                                if (values[i] == pawn) {
                                    if (disc == -1) {
                                        disc = i;
                                        continue;
                                    }
                                    break;
                                } else if (disc > -1) {
                                    if (values[i] == bishop1 || values[i] == queen1 || values[i] == bishop2 || values[i] == queen2) {
                                        discArray.push([0, disc]);
                                        break;
                                    }
                                    break;
                                }
                                break;
                            }
                        }
                    }
                    break;
                case 1:
                    if (value > -1) {
                        for (let i = value; i > -1; i = ((array[i])[1])[1]) {
                            if (values[i] != '') {
                                if (values[i] == pawn) {
                                    if (disc == -1) {
                                        disc = i;
                                        continue;
                                    }
                                    break;
                                } else if (disc > -1) {
                                    if (values[i] == bishop1 || values[i] == queen1 || values[i] == bishop2 || values[i] == queen2) {
                                        discArray.push([1, disc]);
                                        break;
                                    }
                                    break;
                                }
                                break;
                            }
                            if (((array[i])[1])[2] > -1) {
                                for (let j = ((array[i])[1])[2]; j > -1; j = ((array[j])[1])[1]) {
                                    if (values[j] != '') {
                                        if (values[j] == pawn) {
                                            if (disc == -1) {
                                                disc = j;
                                                continue;
                                            }
                                            break;
                                        } else if (disc > -1) {
                                            if (values[j] == bishop1 || values[j] == queen1 || values[j] == bishop2 || values[j] == queen2) {
                                                if (disc == i) {
                                                    discArray.push([2, disc]);
                                                }
                                                discArray.push([1, disc]);
                                                break;
                                            }
                                            break;
                                        }
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    break;
                case 2:
                    if (value > -1) {
                        for (let i = value; i > -1; i = ((array[i])[1])[1]) {
                            if (values[i] != '') {
                                if (values[i] == pawn) {
                                    if (disc == -1) {
                                        disc = i;
                                        continue;
                                    }
                                    break;
                                } else if (disc > -1) {
                                    if (values[i] == bishop1 || values[i] == queen1 || values[i] == bishop2 || values[i] == queen2) {
                                        discArray.push([2, disc]);
                                        break;
                                    }
                                    break;
                                }
                                break;
                            }
                        }
                    }
                    break;
                default:
                    break;
            }
        });
        return discArray;
    }

    const checkForDistanceCheckOutput = (index, array, outArray, small1, small2, queen1, queen2) => {
        (array[index]).forEach(value => {
            for (let i = 0; i < value.length; i++) {
                var a = values[value[i]];
                if (a != '') {
                    if (a == small1 || a == queen1 || a == small2 || a == queen2) {
                        outArray.push({ index: value[i], piece: a });
                    }
                    break;
                }
            }
        });
    }

    const checkForCloseCheckOutput = (array, outArray, piece) => {
        array.forEach(value => {
            if (values[value] == piece) {
                outArray.push({ index: value, piece: values[value] });
            }
        });
    }

    const checkArray = (index, colour) => {
        var checkArray = [];
        if (colour == 'Black') {
            checkForDistanceCheckOutput(index, orthogonArray, checkArray, '♖', '🨂', '♕', '🨁');
            checkForDistanceCheckOutput(index, diagonArray, checkArray, '♗', '🨃', '♕', '🨁');
            checkForCloseCheckOutput((whitePawnArray[index])[2], '♙');
            checkForCloseCheckOutput((bichromePawnArray[index])[2], '🨅');
            checkForCloseCheckOutput(knightArray[index], '♘');
            checkForCloseCheckOutput(knightArray[index], '🨄');
        } else if (colour == 'White') {
            checkForDistanceCheckOutput(index, orthogonArray, checkArray, '♜', '🨂', '♛', '🨁');
            checkForDistanceCheckOutput(index, diagonArray, checkArray, '♝', '🨃', '♛', '🨁');
            checkForCloseCheckOutput((blackPawnArray[index])[2], '♟');
            checkForCloseCheckOutput((bichromePawnArray[index])[2], '🨅');
            checkForCloseCheckOutput(knightArray[index], '♞');
            checkForCloseCheckOutput(knightArray[index], '🨄');
        } else if (colour == 'Bichrome') {
            checkForDistanceCheckOutput(index, orthogonArray, checkArray, '♖', '♜', '♕', '♛');
            checkForDistanceCheckOutput(index, diagonArray, checkArray, '♗', '♝', '♕', '♛');
            checkForCloseCheckOutput((whitePawnArray[index])[2], '♙');
            checkForCloseCheckOutput((blackPawnArray[index])[2], '♟');
            checkForCloseCheckOutput(knightArray[index], '♘');
            checkForCloseCheckOutput(knightArray[index], '♞');
        }
        return checkArray;
    }

    const checkForCastle = (kingIndex, rookIndex) => {
        if (kingIndex == 32 && !selected.moved[0]) {
            // black king
            if (rookIndex == 0 && !selected.moved[3]) {
                // left rook
                if (values[24] == '' && values[16] == '' && values[8] == '' && !checkForCheckBlack(32) && !checkForCheckBlack(24) && !checkForCheckBlack(16)) {
                    return true;
                }
            } else if (rookIndex == 56 && !selected.moved[4]) {
                // right rook
                if (values[40] == '' && values[48] == '' && !checkForCheckBlack(32) && !checkForCheckBlack(40) && !checkForCheckBlack(48)) {
                    return true;
                }
            }
        } else if (kingIndex == 92 && !selected.moved[1]) {
            // white king
            if (rookIndex == 88 && !selected.moved[5]) {
                // left rook
                if (values[91] == '' && values[90] == '' && values[89] == '' && !checkForCheckWhite(92) && !checkForCheckWhite(91) && !checkForCheckWhite(90)) {
                    return true;
                }
            } else if (rookIndex == 95 && !selected.moved[6]) {
                // right rook
                if (values[93] == '' && values[94] == '' && !checkForCheckWhite(92) && !checkForCheckWhite(93) && !checkForCheckWhite(94)) {
                    return true;
                }
            }
        } else if (kingIndex == 31 && !selected.moved[2]) {
            // bichrome king
            if (rookIndex == 63 && !selected.moved[7]) {
                // left rook
                if (values[39] == '' && values[47] == '' && values[55] == '' && !checkForCheckBichrome(31) && !checkForCheckBichrome(39) && !checkForCheckBichrome(47)) {
                    return true;
                }
            } else if (rookIndex == 7 && !selected.moved[8]) {
                // right rook
                if (values[23] == '' && values[15] == '' && !checkForCheckBichrome(31) && !checkForCheckBichrome(23) && !checkForCheckBichrome(15)) {
                    return true;
                }
            }
        }
        return false;
    }

    const whiteKingMovement = (array, index) => {
        (kingArray[index]).forEach(value => {
            if (values[value] == '' || blackPieces(values[value]) || bichromePieces(values[value])) {
                if (!checkForCheckWhite(value)) {
                    array.push(value);
                }
            }
        });
    }

    const blackKingMovement = (array, index) => {
        (kingArray[index]).forEach(value => {
            if (values[value] == '' || whitePieces(values[value]) || bichromePieces(values[value])) {
                if (!checkForCheckBlack(value)) {
                    array.push(value);
                }
            }
        });
    }

    const bichromeKingMovement = (array, index) => {
        (kingArray[index]).forEach(value => {
            if (values[value] == '' || whitePieces(values[value]) || blackPieces(values[value])) {
                if (!checkForCheckBichrome(value)) {
                    array.push(value);
                }
            }
        });
    }

    const threeWayDiscoverDirection = (dir, discDir, discDir2, index) => {
        var discO = (discDir == '');
        switch (dir) {
            case 0:
                if (threeArrayB.some(id => discDir2 == id)) {
                    if (threeArrayA.some(id => index == id)) {
                        discO = (discDir == 'upLeft' || discDir == 'downRight' || discDir == '');
                    } else if (threeArrayC.some(id => index == id)) {
                        discO = (discDir == 'upLeft' || discDir == 'extra' || discDir == '');
                    } else {
                        discO = (discDir == 'upLeft' || discDir == 'downRight' || discDir == 'extra' || discDir == '');
                    }
                } else {
                    discO = (discDir == 'upLeft' || discDir == 'downRight' || discDir == 'extra' || discDir == '');
                }
                break;
            case 1:
                if (threeArrayA.some(id => discDir2 == id)) {
                    if (threeArrayB.some(id => index == id)) {
                        discO = (discDir == 'upLeft' || discDir == 'downRight' || discDir == '');
                    } else if (threeArrayC.some(id => index == id)) {
                        discO = (discDir == 'downRight' || discDir == 'extra' || discDir == '');
                    } else {
                        discO = (discDir == 'upLeft' || discDir == 'downRight' || discDir == 'extra' || discDir == '');
                    }
                } else {
                    discO = (discDir == 'upLeft' || discDir == 'downRight' || discDir == 'extra' || discDir == '');
                }
                break;
            case 2:
                if (threeArrayE.some(id => discDir2 == id)) {
                    if (threeArrayD.some(id => index == id)) {
                        discO = (discDir == 'upRight' || discDir == 'downLeft' || discDir == '');
                    } else if (threeArrayF.some(id => index == id)) {
                        discO = (discDir == 'upRight' || discDir == 'extra' || discDir == '');
                    } else {
                        discO = (discDir == 'upRight' || discDir == 'downLeft' || discDir == 'extra' || discDir == '');
                    }
                } else {
                    discO = (discDir == 'upRight' || discDir == 'downLeft' || discDir == 'extra' || discDir == '');
                }
                break;
            case 3:
                if (threeArrayD.some(id => discDir2 == id)) {
                    if (threeArrayE.some(id => index == id)) {
                        discO = (discDir == 'upRight' || discDir == 'downLeft' || discDir == '');
                    } else if (threeArrayF.some(id => index == id)) {
                        discO = (discDir == 'downLeft' || discDir == 'extra' || discDir == '');
                    } else {
                        discO = (discDir == 'upRight' || discDir == 'downLeft' || discDir == 'extra' || discDir == '');
                    }
                } else {
                    discO = (discDir == 'upRight' || discDir == 'downLeft' || discDir == 'extra' || discDir == '');
                }
                break;
            case 4:
                if (threeArrayC.some(id => discDir2 == id)) {
                    if (threeArrayA.some(id => index == id)) {
                        discO = (discDir == 'upLeft' || discDir == 'extra' || discDir == '');
                    } else if (threeArrayB.some(id => index == id)) {
                        discO = (discDir == 'downRight' || discDir == 'extra' || discDir == '');
                    } else {
                        discO = (discDir == 'upLeft' || discDir == 'downRight' || discDir == 'extra' || discDir == '');
                    }
                } else {
                    discO = (discDir == 'upLeft' || discDir == 'downRight' || discDir == 'extra' || discDir == '');
                }
                if (threeArrayF.some(id => discDir2 == id)) {
                    if (threeArrayD.some(id => index == id)) {
                        discO = (discDir == 'downLeft' || discDir == 'extra' || discDir == '');
                    } else if (threeArrayE.some(id => index == id)) {
                        discO = (discDir == 'upRight' || discDir == 'extra' || discDir == '');
                    } else {
                        discO = (discDir == 'upRight' || discDir == 'downLeft' || discDir == 'extra' || discDir == '');
                    }
                } else {
                    discO = (discDir == 'upRight' || discDir == 'downLeft' || discDir == 'extra' || discDir == '');
                }
                break;
            default:
                break;
        }
        return discO;
    }

    const checkForMovement = (index) => {
        var moveArray = [];
        moveArray.push(index);
        var discDir = '';
        var discDir2 = -1;
        var pawnDisc = -1;
        if (player == 'White') {
            if (values[index] == '♔') {
                var checkIndex = index;
            } else {
                var checkIndex = values.findIndex(value => value == '♔');
            }
            var discoverArray = checkForDiscoverCheckWhite(checkIndex);
            var pawnDiscover = checkForDiscoverCheckPawn(checkIndex, whitePawnArray, '♙', '♝', '🨃', '♛', '🨁');
        } else if (player == 'Black') {
            if (values[index] == '♚') {
                var checkIndex = index;
            } else {
                var checkIndex = values.findIndex(value => value == '♚');
            }
            var discoverArray = checkForDiscoverCheckBlack(checkIndex);
            var pawnDiscover = checkForDiscoverCheckPawn(checkIndex, blackPawnArray, '♟', '♗', '🨃', '♕', '🨁');
        } else {
            if (values[index] == '🨀') {
                var checkIndex = index;
            } else {
                var checkIndex = values.findIndex(value => value == '🨀');
            }
            var discoverArray = checkForDiscoverCheckBichrome(checkIndex);
            var pawnDiscover = checkForDiscoverCheckPawn(checkIndex, bichromePawnArray, '🨅', '♗', '♝', '♕', '♛');
        }
        if (discoverArray.some(val => (index == val[1]))) {
            if (discoverArray.find(val => (index == val[1]))[1] == discoverArray.findLast(val => (index == val[1]))[1]) {
                discDir = discoverArray.find(val => (index == val[1]))[0];
                discDir2 = discoverArray.find(val => (index == val[1]))[2];
            } else {
                discDir = 'double';
            }
        }
        if (pawnDiscover.some(val => (index == val[1]))) {
            pawnDisc = pawnDiscover.find(val => (index == val[1]))[0];
        }
        var checkArr = checkArray(checkIndex, player);
        if (checkArr.length > 1) {
            switch (values[index]) {
                // White King Movement
                case '♔':
                    whiteKingMovement(moveArray, index);
                    break;
                // Black King Movement
                case '♚':
                    blackKingMovement(moveArray, index);
                    break;
                // Bichrome King Movement
                case '🨀':
                    bichromeKingMovement(moveArray, index);
                    break;
                default:
                    break;
            }
        } else if (checkArr.length == 1) {
            var uncheckArray = [];
            switch (checkArr[0].piece) {
                case '♕':
                case '♛':
                case '🨁':
                    if (horizontalArray[checkArr[0].index] == horizontalArray[checkIndex]) {
                        if ((orthogonArray[checkIndex])[2].some(value => value == checkArr[0].index)) {
                            for (let i = 0; i <= (orthogonArray[checkIndex])[2].findIndex(value => value == checkArr[0].index); i++) {
                                uncheckArray.push(((orthogonArray[checkIndex])[2])[i]);
                            }
                        }
                        if ((orthogonArray[checkIndex])[3].some(value => value == checkArr[0].index)) {
                            for (let i = 0; i <= (orthogonArray[checkIndex])[3].findIndex(value => value == checkArr[0].index); i++) {
                                uncheckArray.push(((orthogonArray[checkIndex])[3])[i]);
                            }
                        }
                    } else if (verticalArray[checkArr[0].index] == verticalArray[checkIndex]) {
                        if ((orthogonArray[checkIndex])[0].some(value => value == checkArr[0].index)) {
                            for (let i = 0; i <= (orthogonArray[checkIndex])[0].findIndex(value => value == checkArr[0].index); i++) {
                                uncheckArray.push(((orthogonArray[checkIndex])[0])[i]);
                            }
                        }
                        if ((orthogonArray[checkIndex])[1].some(value => value == checkArr[0].index)) {
                            for (let i = 0; i <= (orthogonArray[checkIndex])[1].findIndex(value => value == checkArr[0].index); i++) {
                                uncheckArray.push(((orthogonArray[checkIndex])[1])[i]);
                            }
                        }
                    } else if (diagonalArrayA[checkArr[0].index] == diagonalArrayA[checkIndex]) {
                        if ((diagonArray[checkIndex])[0].some(value => value == checkArr[0].index)) {
                            for (let i = 0; i <= (diagonArray[checkIndex])[0].findIndex(value => value == checkArr[0].index); i++) {
                                uncheckArray.push(((diagonArray[checkIndex])[0])[i]);
                            }
                        }
                        if ((diagonArray[checkIndex])[1].some(value => value == checkArr[0].index)) {
                            for (let i = 0; i <= (diagonArray[checkIndex])[1].findIndex(value => value == checkArr[0].index); i++) {
                                uncheckArray.push(((diagonArray[checkIndex])[1])[i]);
                            }
                        }
                        if ((diagonArray[checkIndex])[4].some(value => value == checkArr[0].index)) {
                            for (let i = 0; i <= (diagonArray[checkIndex])[4].findIndex(value => value == checkArr[0].index); i++) {
                                uncheckArray.push(((diagonArray[checkIndex])[4])[i]);
                            }
                        }
                    } else if (diagonalArrayB[checkArr[0].index] == diagonalArrayB[checkIndex]) {
                        if ((diagonArray[checkIndex])[2].some(value => value == checkArr[0].index)) {
                            for (let i = 0; i <= (diagonArray[checkIndex])[2].findIndex(value => value == checkArr[0].index); i++) {
                                uncheckArray.push(((diagonArray[checkIndex])[2])[i]);
                            }
                        }
                        if ((diagonArray[checkIndex])[3].some(value => value == checkArr[0].index)) {
                            for (let i = 0; i <= (diagonArray[checkIndex])[3].findIndex(value => value == checkArr[0].index); i++) {
                                uncheckArray.push(((diagonArray[checkIndex])[3])[i]);
                            }
                        }
                        if ((diagonArray[checkIndex])[4].some(value => value == checkArr[0].index)) {
                            for (let i = 0; i <= (diagonArray[checkIndex])[4].findIndex(value => value == checkArr[0].index); i++) {
                                uncheckArray.push(((diagonArray[checkIndex])[4])[i]);
                            }
                        }
                    }
                    break;
                case '♗':
                case '♝':
                case '🨃':
                    if (diagonalArrayA[checkArr[0].index] == diagonalArrayA[checkIndex]) {
                        if ((diagonArray[checkIndex])[0].some(value => value == checkArr[0].index)) {
                            for (let i = 0; i <= (diagonArray[checkIndex])[0].findIndex(value => value == checkArr[0].index); i++) {
                                uncheckArray.push(((diagonArray[checkIndex])[0])[i]);
                            }
                        }
                        if ((diagonArray[checkIndex])[1].some(value => value == checkArr[0].index)) {
                            for (let i = 0; i <= (diagonArray[checkIndex])[1].findIndex(value => value == checkArr[0].index); i++) {
                                uncheckArray.push(((diagonArray[checkIndex])[1])[i]);
                            }
                        }
                        if ((diagonArray[checkIndex])[4].some(value => value == checkArr[0].index)) {
                            for (let i = 0; i <= (diagonArray[checkIndex])[4].findIndex(value => value == checkArr[0].index); i++) {
                                uncheckArray.push(((diagonArray[checkIndex])[4])[i]);
                            }
                        }
                    } else if (diagonalArrayB[checkArr[0].index] == diagonalArrayB[checkIndex]) {
                        if ((diagonArray[checkIndex])[2].some(value => value == checkArr[0].index)) {
                            for (let i = 0; i <= (diagonArray[checkIndex])[2].findIndex(value => value == checkArr[0].index); i++) {
                                uncheckArray.push(((diagonArray[checkIndex])[2])[i]);
                            }
                        }
                        if ((diagonArray[checkIndex])[3].some(value => value == checkArr[0].index)) {
                            for (let i = 0; i <= (diagonArray[checkIndex])[3].findIndex(value => value == checkArr[0].index); i++) {
                                uncheckArray.push(((diagonArray[checkIndex])[3])[i]);
                            }
                        }
                        if ((diagonArray[checkIndex])[4].some(value => value == checkArr[0].index)) {
                            for (let i = 0; i <= (diagonArray[checkIndex])[4].findIndex(value => value == checkArr[0].index); i++) {
                                uncheckArray.push(((diagonArray[checkIndex])[4])[i]);
                            }
                        }
                    }
                    break;
                case '♖':
                case '♜':
                case '🨂':
                    if (horizontalArray[checkArr[0].index] == horizontalArray[checkIndex]) {
                        if ((orthogonArray[checkIndex])[2].some(value => value == checkArr[0].index)) {
                            for (let i = 0; i <= (orthogonArray[checkIndex])[2].findIndex(value => value == checkArr[0].index); i++) {
                                uncheckArray.push(((orthogonArray[checkIndex])[2])[i]);
                            }
                        }
                        if ((orthogonArray[checkIndex])[3].some(value => value == checkArr[0].index)) {
                            for (let i = 0; i <= (orthogonArray[checkIndex])[3].findIndex(value => value == checkArr[0].index); i++) {
                                uncheckArray.push(((orthogonArray[checkIndex])[3])[i]);
                            }
                        }
                    } else if (verticalArray[checkArr[0].index] == verticalArray[checkIndex]) {
                        if ((orthogonArray[checkIndex])[0].some(value => value == checkArr[0].index)) {
                            for (let i = 0; i <= (orthogonArray[checkIndex])[0].findIndex(value => value == checkArr[0].index); i++) {
                                uncheckArray.push(((orthogonArray[checkIndex])[0])[i]);
                            }
                        }
                        if ((orthogonArray[checkIndex])[1].some(value => value == checkArr[0].index)) {
                            for (let i = 0; i <= (orthogonArray[checkIndex])[1].findIndex(value => value == checkArr[0].index); i++) {
                                uncheckArray.push(((orthogonArray[checkIndex])[1])[i]);
                            }
                        }
                    }
                    break;
                case '♘':
                case '♞':
                case '🨄':
                case '♙':
                case '♟':
                case '🨅':
                    uncheckArray.push(checkArr[0].index);
                    break;
                default:
                    break;
            }
            switch (values[index]) {
                // White Pawn Movement
                case '♙':
                    (whitePawnArray[index])[1].forEach((value, ind) => {
                        if (value > -1) {
                            if (pawnDisc == ind) {
                                if (uncheckArray.some(val => val == value) && values[value] != '') {
                                    moveArray.push(value);
                                }
                            }
                        }
                    });
                    if (discDir == 'up' || discDir == 'down' || discDir == '') {
                        (whitePawnArray[index])[0].some(value => {
                            if (uncheckArray.some(val => val == value) && values[value] == '') {
                                moveArray.push(value);
                                return false;
                            }
                            return true;
                        });
                    }
                    break;
                // Black Pawn Movement
                case '♟':
                    (blackPawnArray[index])[1].forEach((value, ind) => {
                        if (value > -1) {
                            if (pawnDisc == ind) {
                                if (uncheckArray.some(val => val == value) && values[value] != '') {
                                    moveArray.push(value);
                                }
                            }
                        }
                    });
                    if (discDir == 'up' || discDir == 'down' || discDir == '') {
                        (blackPawnArray[index])[0].some(value => {
                            if (uncheckArray.some(val => val == value) && values[value] == '') {
                                moveArray.push(value);
                                return false;
                            }
                            return true;
                        });
                    }
                    break;
                // Bichrome Pawn Movement
                case '🨅':
                    (bichromePawnArray[index])[1].forEach((value, ind) => {
                        if (value > -1) {
                            if (pawnDisc == ind) {
                                if (uncheckArray.some(val => val == value) && values[value] != '') {
                                    moveArray.push(value);
                                }
                            }
                        }
                    });
                    if (discDir == 'up' || discDir == 'down' || discDir == '') {
                        (bichromePawnArray[index])[0].some(value => {
                            if (uncheckArray.some(val => val == value) && values[value] == '') {
                                moveArray.push(value);
                                return false;
                            }
                            return true;
                        });
                    }
                    break;
                // Rook Movement
                case '♖':
                case '♜':
                case '🨂':
                    (orthogonArray[index]).forEach((value, ind) => {
                        if (((ind < 2) ? (discDir == 'up' || discDir == 'down') : (discDir == 'left' || discDir == 'right')) || discDir == '') {
                            for (let i = 0; i < value.length; i++) {
                                var a = value[i];
                                if (uncheckArray.some(val => (a == val))) {
                                    moveArray.push(a);
                                } else if (values[a] == '') {
                                    continue;
                                } else {
                                    break;
                                }
                            }
                        }
                    });
                    break;
                // Knight Movement
                case '♘':
                case '♞':
                case '🨄':
                    if (discDir == '') {
                        (knightArray[index]).forEach(value => {
                            if (uncheckArray.some(val => (value == val))) {
                                moveArray.push(value);
                            }
                        });
                    }
                    break;
                // Bishop Movement
                case '♗':
                case '♝':
                case '🨃':
                    if (discDir == 'double') {
                        (diagonArrayAlt[index]).forEach((value) => {
                            for (let i = 0; i < value.length; i++) {
                                var a = value[i];
                                if (uncheckArray.some(val => (a == val))) {
                                    moveArray.push(a);
                                } else if (values[a] == '') {
                                    continue;
                                } else {
                                    break;
                                }
                            }
                        });
                    } else {
                        (diagonArray[index]).forEach((value, ind) => {
                            if (threeWayDiscoverDirection(ind, discDir, discDir2, index)) {
                                for (let i = 0; i < value.length; i++) {
                                    var a = value[i];
                                    if (uncheckArray.some(val => (a == val))) {
                                        moveArray.push(a);
                                    } else if (values[a] == '') {
                                        continue;
                                    } else {
                                        break;
                                    }
                                }
                            }
                        });
                    }
                    break;
                // Queen Movement
                case '♕':
                case '♛':
                case '🨁':
                    (orthogonArray[index]).forEach((value, ind) => {
                        if (((ind < 2) ? (discDir == 'up' || discDir == 'down') : (discDir == 'left' || discDir == 'right')) || discDir == '') {
                            for (let i = 0; i < value.length; i++) {
                                var a = value[i];
                                if (uncheckArray.some(val => (a == val))) {
                                    moveArray.push(a);
                                } else if (values[a] == '') {
                                    continue;
                                } else {
                                    break;
                                }
                            }
                        }
                    });
                    if (discDir == 'double') {
                        (diagonArrayAlt[index]).forEach((value) => {
                            for (let i = 0; i < value.length; i++) {
                                var a = value[i];
                                if (uncheckArray.some(val => (a == val))) {
                                    moveArray.push(a);
                                } else if (values[a] == '') {
                                    continue;
                                } else {
                                    break;
                                }
                            }
                        });
                    } else {
                        (diagonArray[index]).forEach((value, ind) => {
                            if (threeWayDiscoverDirection(ind, discDir, discDir2, index)) {
                                for (let i = 0; i < value.length; i++) {
                                    var a = value[i];
                                    if (uncheckArray.some(val => (a == val))) {
                                        moveArray.push(a);
                                    } else if (values[a] == '') {
                                        continue;
                                    } else {
                                        break;
                                    }
                                }
                            }
                        });
                    }
                    break;
                // White King Movement
                case '♔':
                    whiteKingMovement(moveArray, index);
                    break;
                // Black King Movement
                case '♚':
                    blackKingMovement(moveArray, index);
                    break;
                // Bichrome King Movement
                case '🨀':
                    bichromeKingMovement(moveArray, index);
                    break;
                default:
                    break;
            }
        } else {
            switch (values[index]) {
                // White Pawn Movement
                case '♙':
                    (whitePawnArray[index])[1].forEach((value, ind) => {
                        if (value > -1) {
                            if (pawnDisc == ind) {
                                if (blackPieces(values[value]) || bichromePieces(values[value])) {
                                    moveArray.push(value);
                                }
                            }
                        }
                    });
                    if (discDir == 'up' || discDir == 'down' || discDir == '') {
                        (whitePawnArray[index])[0].some(value => {
                            if (values[value] == '') {
                                moveArray.push(value);
                                return false;
                            }
                            return true;
                        });
                    }
                    break;
                // Black Pawn Movement
                case '♟':
                    (blackPawnArray[index])[1].forEach((value, ind) => {
                        if (value > -1) {
                            if (pawnDisc == ind) {
                                if (whitePieces(values[value]) || bichromePieces(values[value])) {
                                    moveArray.push(value);
                                }
                            }
                        }
                    });
                    if (discDir == 'up' || discDir == 'down' || discDir == '') {
                        (blackPawnArray[index])[0].some(value => {
                            if (values[value] == '') {
                                moveArray.push(value);
                                return false;
                            }
                            return true;
                        });
                    }
                    break;
                // Bichrome Pawn Movement
                case '🨅':
                    (bichromePawnArray[index])[1].forEach((value, ind) => {
                        if (value > -1) {
                            if (pawnDisc == ind) {
                                if (whitePieces(values[value]) || blackPieces(values[value])) {
                                    moveArray.push(value);
                                }
                            }
                        }
                    });
                    if (discDir == 'up' || discDir == 'down' || discDir == '') {
                        (bichromePawnArray[index])[0].some(value => {
                            if (values[value] == '') {
                                moveArray.push(value);
                                return false;
                            }
                            return true;
                        });
                    }
                    break;
                // White Rook Movement
                case '♖':
                    (orthogonArray[index]).forEach((value, ind) => {
                        if (((ind < 2) ? (discDir == 'up' || discDir == 'down') : (discDir == 'left' || discDir == 'right')) || discDir == '') {
                            for (let i = 0; i < value.length; i++) {
                                var a = value[i];
                                if (values[a] == '') {
                                    moveArray.push(a);
                                } else {
                                    if (blackPieces(values[a]) || bichromePieces(values[a])) {
                                        moveArray.push(a);
                                    }
                                    break;
                                }
                            }
                        }
                    });
                    break;
                // Black Rook Movement
                case '♜':
                    (orthogonArray[index]).forEach((value, ind) => {
                        if (((ind < 2) ? (discDir == 'up' || discDir == 'down') : (discDir == 'left' || discDir == 'right')) || discDir == '') {
                            for (let i = 0; i < value.length; i++) {
                                var a = value[i];
                                if (values[a] == '') {
                                    moveArray.push(a);
                                } else {
                                    if (whitePieces(values[a]) || bichromePieces(values[a])) {
                                        moveArray.push(a);
                                    }
                                    break;
                                }
                            }
                        }
                    });
                    break;
                // Bichrome Rook Movement
                case '🨂':
                    (orthogonArray[index]).forEach((value, ind) => {
                        if (((ind < 2) ? (discDir == 'up' || discDir == 'down') : (discDir == 'left' || discDir == 'right')) || discDir == '') {
                            for (let i = 0; i < value.length; i++) {
                                var a = value[i];
                                if (values[a] == '') {
                                    moveArray.push(a);
                                } else {
                                    if (whitePieces(values[a]) || blackPieces(values[a])) {
                                        moveArray.push(a);
                                    }
                                    break;
                                }
                            }
                        }
                    });
                    break;
                // White Knight Movement
                case '♘':
                    if (discDir == '') {
                        (knightArray[index]).forEach(value => {
                            if (values[value] == '' || blackPieces(values[value]) || bichromePieces(values[value])) {
                                moveArray.push(value);
                            }
                        });
                    }
                    break;
                // Black Knight Movement
                case '♞':
                    if (discDir == '') {
                        (knightArray[index]).forEach(value => {
                            if (values[value] == '' || whitePieces(values[value]) || bichromePieces(values[value])) {
                                moveArray.push(value);
                            }
                        });
                    }
                    break;
                // Bichrome Knight Movement
                case '🨄':
                    if (discDir == '') {
                        (knightArray[index]).forEach(value => {
                            if (values[value] == '' || whitePieces(values[value]) || blackPieces(values[value])) {
                                moveArray.push(value);
                            }
                        });
                    }
                    break;
                // White Bishop Movement
                case '♗':
                    if (discDir == 'double') {
                        (diagonArrayAlt[index]).forEach((value) => {
                            for (let i = 0; i < value.length; i++) {
                                var a = value[i];
                                if (values[a] == '') {
                                    moveArray.push(a);
                                } else {
                                    if (blackPieces(values[a]) || bichromePieces(values[a])) {
                                        moveArray.push(a);
                                    }
                                    break;
                                }
                            }
                        });
                    } else {
                        (diagonArray[index]).forEach((value, ind) => {
                            if (threeWayDiscoverDirection(ind, discDir, discDir2, index)) {
                                for (let i = 0; i < value.length; i++) {
                                    var a = value[i];
                                    if (values[a] == '') {
                                        moveArray.push(a);
                                    } else {
                                        if (blackPieces(values[a]) || bichromePieces(values[a])) {
                                            moveArray.push(a);
                                        }
                                        break;
                                    }
                                }
                            }
                        });
                    }
                    break;
                // Black Bishop Movement
                case '♝':
                    if (discDir == 'double') {
                        (diagonArrayAlt[index]).forEach((value) => {
                            for (let i = 0; i < value.length; i++) {
                                var a = value[i];
                                if (values[a] == '') {
                                    moveArray.push(a);
                                } else {
                                    if (whitePieces(values[a]) || bichromePieces(values[a])) {
                                        moveArray.push(a);
                                    }
                                    break;
                                }
                            }
                        });
                    } else {
                        (diagonArray[index]).forEach((value, ind) => {
                            if (threeWayDiscoverDirection(ind, discDir, discDir2, index)) {
                                for (let i = 0; i < value.length; i++) {
                                    var a = value[i];
                                    if (values[a] == '') {
                                        moveArray.push(a);
                                    } else {
                                        if (whitePieces(values[a]) || bichromePieces(values[a])) {
                                            moveArray.push(a);
                                        }
                                        break;
                                    }
                                }
                            }
                        });
                    }
                    break;
                // Bichrome Bishop Movement
                case '🨃':
                    if (discDir == 'double') {
                        (diagonArrayAlt[index]).forEach((value) => {
                            for (let i = 0; i < value.length; i++) {
                                var a = value[i];
                                if (values[a] == '') {
                                    moveArray.push(a);
                                } else {
                                    if (whitePieces(values[a]) || blackPieces(values[a])) {
                                        moveArray.push(a);
                                    }
                                    break;
                                }
                            }
                        });
                    } else {
                        (diagonArray[index]).forEach((value, ind) => {
                            if (threeWayDiscoverDirection(ind, discDir, discDir2, index)) {
                                for (let i = 0; i < value.length; i++) {
                                    var a = value[i];
                                    if (values[a] == '') {
                                        moveArray.push(a);
                                    } else {
                                        if (whitePieces(values[a]) || blackPieces(values[a])) {
                                            moveArray.push(a);
                                        }
                                        break;
                                    }
                                }
                            }
                        });
                    }
                    break;
                // White Queen Movement
                case '♕':
                    (orthogonArray[index]).forEach((value, ind) => {
                        if (((ind < 2) ? (discDir == 'up' || discDir == 'down') : (discDir == 'left' || discDir == 'right')) || discDir == '') {
                            for (let i = 0; i < value.length; i++) {
                                var a = value[i];
                                if (values[a] == '') {
                                    moveArray.push(a);
                                } else {
                                    if (blackPieces(values[a]) || bichromePieces(values[a])) {
                                        moveArray.push(a);
                                    }
                                    break;
                                }
                            }
                        }
                    });
                    if (discDir == 'double') {
                        (diagonArrayAlt[index]).forEach((value) => {
                            for (let i = 0; i < value.length; i++) {
                                var a = value[i];
                                if (values[a] == '') {
                                    moveArray.push(a);
                                } else {
                                    if (blackPieces(values[a]) || bichromePieces(values[a])) {
                                        moveArray.push(a);
                                    }
                                    break;
                                }
                            }
                        });
                    } else {
                        (diagonArray[index]).forEach((value, ind) => {
                            if (threeWayDiscoverDirection(ind, discDir, discDir2, index)) {
                                for (let i = 0; i < value.length; i++) {
                                    var a = value[i];
                                    if (values[a] == '') {
                                        moveArray.push(a);
                                    } else {
                                        if (blackPieces(values[a]) || bichromePieces(values[a])) {
                                            moveArray.push(a);
                                        }
                                        break;
                                    }
                                }
                            }
                        });
                    }
                    break;
                // Black Queen Movement
                case '♛':
                    (orthogonArray[index]).forEach((value, ind) => {
                        if (((ind < 2) ? (discDir == 'up' || discDir == 'down') : (discDir == 'left' || discDir == 'right')) || discDir == '') {
                            for (let i = 0; i < value.length; i++) {
                                var a = value[i];
                                if (values[a] == '') {
                                    moveArray.push(a);
                                } else {
                                    if (whitePieces(values[a]) || bichromePieces(values[a])) {
                                        moveArray.push(a);
                                    }
                                    break;
                                }
                            }
                        }
                    });
                    if (discDir == 'double') {
                        (diagonArrayAlt[index]).forEach((value) => {
                            for (let i = 0; i < value.length; i++) {
                                var a = value[i];
                                if (values[a] == '') {
                                    moveArray.push(a);
                                } else {
                                    if (whitePieces(values[a]) || bichromePieces(values[a])) {
                                        moveArray.push(a);
                                    }
                                    break;
                                }
                            }
                        });
                    } else {
                        (diagonArray[index]).forEach((value, ind) => {
                            if (threeWayDiscoverDirection(ind, discDir, discDir2, index)) {
                                for (let i = 0; i < value.length; i++) {
                                    var a = value[i];
                                    if (values[a] == '') {
                                        moveArray.push(a);
                                    } else {
                                        if (whitePieces(values[a]) || bichromePieces(values[a])) {
                                            moveArray.push(a);
                                        }
                                        break;
                                    }
                                }
                            }
                        });
                    }
                    break;
                // Bichrome Queen Movement
                case '🨁':
                    (orthogonArray[index]).forEach((value, ind) => {
                        if (((ind < 2) ? (discDir == 'up' || discDir == 'down') : (discDir == 'left' || discDir == 'right')) || discDir == '') {
                            for (let i = 0; i < value.length; i++) {
                                var a = value[i];
                                if (values[a] == '') {
                                    moveArray.push(a);
                                } else {
                                    if (whitePieces(values[a]) || blackPieces(values[a])) {
                                        moveArray.push(a);
                                    }
                                    break;
                                }
                            }
                        }
                    });
                    if (discDir == 'double') {
                        (diagonArrayAlt[index]).forEach((value) => {
                            for (let i = 0; i < value.length; i++) {
                                var a = value[i];
                                if (values[a] == '') {
                                    moveArray.push(a);
                                } else {
                                    if (whitePieces(values[a]) || blackPieces(values[a])) {
                                        moveArray.push(a);
                                    }
                                    break;
                                }
                            }
                        });
                    } else {
                        (diagonArray[index]).forEach((value, ind) => {
                            if (threeWayDiscoverDirection(ind, discDir, discDir2, index)) {
                                for (let i = 0; i < value.length; i++) {
                                    var a = value[i];
                                    if (values[a] == '') {
                                        moveArray.push(a);
                                    } else {
                                        if (whitePieces(values[a]) || blackPieces(values[a])) {
                                            moveArray.push(a);
                                        }
                                        break;
                                    }
                                }
                            }
                        });
                    }
                    break;
                // White King Movement
                case '♔':
                    whiteKingMovement(moveArray, index);
                    break;
                // Black King Movement
                case '♚':
                    blackKingMovement(moveArray, index);
                    break;
                // Bichrome King Movement
                case '🨀':
                    bichromeKingMovement(moveArray, index);
                    break;
                default:
                    break;
            }
        }
        return moveArray;
    }

    const checkForReps = () => {
        var whiteKing = values.findIndex(value => value == '♔');
        var blackKing = values.findIndex(value => value == '♚');
        var bichromeKing = values.findIndex(value => value == '🨀');
        var whiteQueens = [];
        values.forEach((value, index) => { if (value == '♕' && !whiteQueens.some(val => index == val)) { whiteQueens.push(index); } });
        var blackQueens = [];
        values.forEach((value, index) => { if (value == '♛' && !blackQueens.some(val => index == val)) { blackQueens.push(index); } });
        var bichromeQueens = [];
        values.forEach((value, index) => { if (value == '🨁' && !bichromeQueens.some(val => index == val)) { bichromeQueens.push(index); } });
        var whiteBishops = [];
        checkForPiece('♗', whiteBishops);
        var blackBishops = [];
        checkForPiece('♝', blackBishops);
        var bichromeBishops = [];
        checkForPiece('🨃', bichromeBishops);
        var whiteKnights = [];
        checkForPiece('♘', whiteKnights);
        var blackKnights = [];
        checkForPiece('♞', blackKnights);
        var bichromeKnights = [];
        checkForPiece('🨄', bichromeKnights);
        var whiteRooks = [];
        checkForPiece('♖', whiteRooks);
        var blackRooks = [];
        checkForPiece('♜', blackRooks);
        var bichromeRooks = [];
        checkForPiece('🨂', bichromeRooks);
        var whitePawns = [];
        values.forEach((value, index) => { if (value == '♙' && !whitePawns.some(val => index == val)) { whitePawns.push(index); } });
        var blackPawns = [];
        values.forEach((value, index) => { if (value == '♟' && !blackPawns.some(val => index == val)) { blackPawns.push(index); } });
        var bichromePawns = [];
        values.forEach((value, index) => { if (value == '🨅' && !bichromePawns.some(val => index == val)) { bichromePawns.push(index); } });
        var boardState = 'whiteKing:' + whiteKing.toString() + ';blackKing:' + blackKing.toString() + ';bichromeKing:' + bichromeKing.toString() + ';whiteQueens:' + whiteQueens.toString() + ';blackQueens:' + blackQueens.toString() + ';bichromeQueens:' + bichromeQueens.toString() +
            ';whiteBishops:' + whiteBishops.toString() + ';blackBishops:' + blackBishops.toString() + ';bichromeBishops:' + bichromeBishops.toString() + ';whiteKnights:' + whiteKnights.toString() + ';blackKnights:' + blackKnights.toString() + ';bichromeKnights:' + bichromeKnights.toString() +
            ';whiteRooks:' + whiteRooks.toString() + ';blackRooks:' + blackRooks.toString() + ';bichromeRooks:' + bichromeRooks.toString() + ';whitePawns:' + whitePawns.toString() + ';blackPawns:' + blackPawns.toString() + ';bichromePawns:' + bichromePawns.toString() +
            ';player:' + player.toString() + ';castle:' + selected.moved.toString() + ';passant:' + selected.passant.toString();
        var ind = repetitions.findIndex(value => value.boardState == boardState);
        if (ind != -1) {
            if (repetitions[ind].repeats == '4') {
                console.log('Draw by 5-fold repetition rule');
                setWin('Draw');
            } else {
                var rep = { boardState: boardState, repeats: repetitions[ind].repeats + 1 };
                setRepetitions(repetitions => repetitions.map((value, index) => (index == ind ? rep : value)));
            }
        } else {
            var grep = { boardState: boardState, repeats: 1 };
            var rep = repetitions.slice();
            rep.push(grep);
            setRepetitions(rep);
        }
    }

    const checkForCheck = () => {
        var whiteIndex = false;
        var whiteCheck = false;
        var blackIndex = false;
        var blackCheck = false;
        var bichromeIndex = false;
        var bichromeCheck = false;
        if (player == 'White') {
            whiteIndex = values.findIndex(value => value == '♔');
            whiteCheck = checkForCheckWhite(whiteIndex);
        } else if (player == 'Black') {
            blackIndex = values.findIndex(value => value == '♚');
            blackCheck = checkForCheckBlack(blackIndex);
        } else if (player == 'Bichrome') {
            bichromeIndex = values.findIndex(value => value == '🨀');
            bichromeCheck = checkForCheckBichrome(bichromeIndex);
        }
        if (whiteCheck || blackCheck || bichromeCheck) {
            setWin('Check');
        }
        if (!whiteCheck && !blackCheck && !bichromeCheck) {
            setWin('');
        }
    }

    const checkForMate = () => {
        var blocked = checkForBlocked();
        var copy = values.slice();
        var spliced = values.slice();
        for (let i = 0; i < blocked.length; i++) {
            spliced.splice(blocked[i] - i, 1);
        }
        if (player == 'White' && spliced.every(value => value != '♔' && value != '♕' && value != '♗' && value != '♘' && value != '♖' && value != '♙')) {
            if (win == 'Check') {
                console.log('White loses by checkmate');
                if (firstOut == '') {
                    setFirstOut('White');
                    playerModifier(setPlayer);
                    setWin('');
                    values.forEach((value, index) => { if (whitePieces(value) || value == '♔') { copy[index] = '' } });
                    setValues(copy);
                } else {
                    setWin(firstOut == 'Black' ? 'Bichrome' : 'Black');
                    return;
                }
            } else {
                console.log('White loses by stalemate');
                if (firstOut == '') {
                    setFirstOut('White');
                    playerModifier(setPlayer);
                    setWin('');
                    values.forEach((value, index) => { if (whitePieces(value) || value == '♔') { copy[index] = '' } });
                    setValues(copy);
                } else {
                    setWin(firstOut == 'Black' ? 'Bichrome' : 'Black');
                    return;
                }
            }
        }
        if (player == 'Black' && spliced.every(value => value != '♚' && value != '♛' && value != '♝' && value != '♞' && value != '♜' && value != '♟')) {
            if (win == 'Check') {
                console.log('Black loses by checkmate');
                if (firstOut == '') {
                    setFirstOut('Black');
                    playerModifier(setPlayer);
                    setWin('');
                    values.forEach((value, index) => { if (blackPieces(value) || value == '♚') { copy[index] = '' } });
                    setValues(copy);
                } else {
                    setWin(firstOut == 'White' ? 'Bichrome' : 'White');
                    return;
                }
            } else {
                console.log('Black loses by stalemate');
                if (firstOut == '') {
                    setFirstOut('Black');
                    playerModifier(setPlayer);
                    setWin('');
                    values.forEach((value, index) => { if (blackPieces(value) || value == '♚') { copy[index] = '' } });
                    setValues(copy);
                } else {
                    setWin(firstOut == 'White' ? 'Bichrome' : 'White');
                    return;
                }
            }
        }
        if (player == 'Bichrome' && spliced.every(value => value != '🨀' && value != '🨁' && value != '🨃' && value != '🨄' && value != '🨂' && value != '🨅')) {
            if (win == 'Check') {
                console.log('Bichrome loses by checkmate');
                if (firstOut == '') {
                    setFirstOut('Bichrome');
                    playerModifier(setPlayer);
                    setWin('');
                    values.forEach((value, index) => { if (bichromePieces(value) || value == '🨀') { copy[index] = '' } });
                    setValues(copy);
                } else {
                    setWin(firstOut == 'Black' ? 'White' : 'Black');
                    return;
                }
            } else {
                console.log('Bichrome loses by stalemate');
                if (firstOut == '') {
                    setFirstOut('Bichrome');
                    playerModifier(setPlayer);
                    setWin('');
                    values.forEach((value, index) => { if (bichromePieces(value) || value == '🨀') { copy[index] = '' } });
                    setValues(copy);
                } else {
                    setWin(firstOut == 'Black' ? 'White' : 'Black');
                    return;
                }
            }
        }
        if (count >= 150) {
            console.log('Draw by 50-Move Rule');
            setWin('Draw');
        }
    }

    return (
        <div className="app5">
            <div aria-live="polite">
                {((win == '') ? (player + "'s turn") : ((win == 'Draw') ? 'Draw' : ((win == 'Check') ? (player + ' is in check') : ('Winner is ' + win))))}
            </div>
            <div className="board5">
                {values.map((value, index) => (<Cell id={index} value={value} win={win} player={player} selected={selected} setCount={setCount}
                    setPlayer={() => playerModifier(setPlayer)} setArray={arrayModifier} setSelected={setSelected} checkForMovement={checkForMovement} checkForCastle={checkForCastle} />))}
            </div>
            <button onClick={reset}>Reset</button>
        </div>
    );
} 